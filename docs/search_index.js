var searchModuleIndex = ["audio","graphics","network","system","window",];
var searchIndex = ["listener_set_global_volume","listener_get_global_volume","listener_set_position","listener_get_position","listener_set_direction","listener_get_direction","listener_set_up_vector","listener_get_up_vector","TimeSpan","new_music_from_file","MusicNewMusicFromFileParams","new_music_from_memory","MusicNewMusicFromMemoryParams","new_music_from_stream","MusicNewMusicFromStreamParams","Music","free","get_attenuation","get_duration","get_loop","get_loop_points","get_min_distance","get_pitch","get_playing_offset","get_position","get_status","get_volume","is_relative_to_listener","pause","play","set_attenuation","set_loop","set_loop_points","set_min_distance","set_pitch","set_playing_offset","set_position","set_relative_to_listener","set_volume","stop","new_sound","Sound","copy","free","get_attenuation","get_buffer","get_loop","get_min_distance","get_pitch","get_playing_offset","get_position","get_status","get_volume","is_relative_to_listener","pause","play","set_attenuation","set_buffer","set_loop","set_min_distance","set_pitch","set_playing_offset","set_position","set_relative_to_listener","set_volume","stop","new_sound_buffer_from_file","SoundBufferNewSoundBufferFromFileParams","new_sound_buffer_from_memory","SoundBufferNewSoundBufferFromMemoryParams","new_sound_buffer_from_stream","SoundBufferNewSoundBufferFromStreamParams","new_sound_buffer_from_samples","SoundBufferNewSoundBufferFromSamplesParams","SoundBuffer","copy","free","get_duration","get_sample_count","get_samples","save_to_file","new_sound_buffer_recorder","SoundBufferRecorder","free","get_buffer","get_device","set_device","start","stop","SoundRecorderStartCallback","SoundRecorderProcessCallback","SoundRecorderStopCallback","new_sound_recorder","SoundRecorderNewSoundRecorderParams","SoundRecorder","free","get_device","set_channel_count","set_device","set_processing_interval","start","stop","soundrecorder_is_available","soundrecorder_get_default_device","SoundStatus","SoundStreamChunk","SoundStreamGetDataCallback","SoundStreamSeekCallback","new_sound_stream","SoundStreamNewSoundStreamParams","SoundStream","free","get_attenuation","get_loop","get_min_distance","get_pitch","get_playing_offset","get_position","get_status","get_volume","is_relative_to_listener","pause","play","set_attenuation","set_loop","set_min_distance","set_pitch","set_playing_offset","set_position","set_relative_to_listener","set_volume","stop","BlendMode","BlendFactor","BlendEquation","new_circle_shape","CircleShape","copy","free","get_fill_color","get_global_bounds","get_inverse_transform","get_local_bounds","get_origin","get_outline_color","get_outline_thickness","get_point","get_point_count","get_position","get_radius","get_rotation","get_scale","get_texture","get_texture_rect","get_transform","move","rotate","scale","set_fill_color","set_origin","set_outline_color","set_outline_thickness","set_point_count","set_position","set_radius","set_rotation","set_scale","set_texture","set_texture_rect","Color","to_integer","add","subtract","modulate","color_from_rgb","color_from_rgba","color_from_integer","new_convex_shape","ConvexShape","copy","free","get_fill_color","get_global_bounds","get_inverse_transform","get_local_bounds","get_origin","get_outline_color","get_outline_thickness","get_point","get_point_count","get_position","get_rotation","get_scale","get_texture","get_texture_rect","get_transform","move","rotate","scale","set_fill_color","set_origin","set_outline_color","set_outline_thickness","set_point","set_point_count","set_position","set_rotation","set_scale","set_texture","set_texture_rect","new_font_from_file","FontNewFontFromFileParams","new_font_from_memory","FontNewFontFromMemoryParams","new_font_from_stream","FontNewFontFromStreamParams","Font","copy","free","get_glyph","get_info","get_kerning","get_line_spacing","get_texture","get_underline_position","get_underline_thickness","FontGetGlyphParams","FontGetKerningParams","FontInfo","GlslVec2","GlslIvec2","GlslVec3","GlslBvec2","GlslIvec3","GlslBvec3","GlslVec4","GlslIvec4","GlslBvec4","GlslMat3","GlslMat4","Glyph","new_image","ImageNewImageParams","new_image_from_color","ImageNewImageFromColorParams","new_image_from_pixels","ImageNewImageFromPixelsParams","new_image_from_file","ImageNewImageFromFileParams","new_image_from_memory","ImageNewImageFromMemoryParams","new_image_from_stream","ImageNewImageFromStreamParams","Image","copy","copy_image","flip_horizontally","flip_vertically","free","get_pixel","get_pixels_ptr","get_size","save_to_file","set_pixel","new_void_mask_from_color","ImageNewVoidMaskFromColorParams","ImageCopyImageParams","ImageSetPixelParams","PrimitiveType","FloatRect","contains","intersects","IntRect","contains","intersects","new_rectangle_shape","RectangleShape","copy","free","get_fill_color","get_global_bounds","get_inverse_transform","get_local_bounds","get_origin","get_outline_color","get_outline_thickness","get_point","get_point_count","get_position","get_rotation","get_scale","get_size","get_texture","get_texture_rect","get_transform","move","rotate","scale","set_fill_color","set_origin","set_outline_color","set_outline_thickness","set_position","set_rotation","set_scale","set_size","set_texture","set_texture_rect","RenderStates","new_render_texture","RenderTextureNewRenderTextureParams","new_render_texture_with_settings","RenderTextureNewRenderTextureWithSettingsParams","RenderTexture","clear","display","draw_circle_shape","draw_convex_shape","draw_primitives","draw_rectangle_shape","draw_shape","draw_sprite","draw_text","draw_vertex_array","draw_vertex_buffer","free","generate_mipmap","get_default_view","get_size","get_texture","get_view","get_viewport","is_repeated","is_smooth","map_coords_to_pixel","map_pixel_to_coords","pop_gl_states","push_gl_states","reset_gl_states","set_active","set_repeated","set_smooth","set_view","RenderTextureDrawSpriteParams","RenderTextureDrawTextParams","RenderTextureDrawShapeParams","RenderTextureDrawCircleShapeParams","RenderTextureDrawConvexShapeParams","RenderTextureDrawRectangleShapeParams","RenderTextureDrawVertexArrayParams","RenderTextureDrawVertexBufferParams","RenderTextureDrawPrimitivesParams","new_render_window","RenderWindowNewRenderWindowParams","new_render_window_unicode","RenderWindowNewRenderWindowUnicodeParams","new_render_window_from_handle","RenderWindowNewRenderWindowFromHandleParams","RenderWindow","clear","close","display","draw_circle_shape","draw_convex_shape","draw_primitives","draw_rectangle_shape","draw_shape","draw_sprite","draw_text","draw_vertex_array","draw_vertex_buffer","free","get_default_view","get_position","get_settings","get_size","get_system_handle","get_view","get_viewport","has_focus","is_open","map_coords_to_pixel","map_pixel_to_coords","poll_event","pop_gl_states","push_gl_states","request_focus","reset_gl_states","set_active","set_framerate_limit","set_icon","set_joystick_threshold","set_key_repeat_enabled","set_mouse_cursor","set_mouse_cursor_grabbed","set_mouse_cursor_visible","set_position","set_size","set_title","set_unicode_title","set_vertical_sync_enabled","set_view","set_visible","wait_event","RenderWindowSetIconParams","RenderWindowDrawSpriteParams","RenderWindowDrawTextParams","RenderWindowDrawShapeParams","RenderWindowDrawCircleShapeParams","RenderWindowDrawConvexShapeParams","RenderWindowDrawRectangleShapeParams","RenderWindowDrawVertexArrayParams","RenderWindowDrawVertexBufferParams","RenderWindowDrawPrimitivesParams","mouse_get_position_render_window","mouse_set_position_render_window","touch_get_position_render_window","new_shader_from_file","ShaderNewShaderFromFileParams","new_shader_from_memory","ShaderNewShaderFromMemoryParams","new_shader_from_stream","ShaderNewShaderFromStreamParams","Shader","bind","free","set_bool_uniform","set_color_uniform","set_current_texture_uniform","set_float_uniform","set_float_uniform_array","set_int_color_uniform","set_int_uniform","set_texture_uniform","setbvec2uniform","setbvec3uniform","setbvec4uniform","setivec2uniform","setivec3uniform","setivec4uniform","setmat3uniform","setmat3uniformarray","setmat4uniform","setmat4uniformarray","setvec2uniform","setvec2uniformarray","setvec3uniform","setvec3uniformarray","setvec4uniform","setvec4uniformarray","ShaderSetFloatUniformArrayParams","ShaderSetvec2uniformarrayParams","ShaderSetvec3uniformarrayParams","ShaderSetvec4uniformarrayParams","ShaderSetmat3uniformarrayParams","ShaderSetmat4uniformarrayParams","shader_is_available","shader_is_geometry_available","ShapeGetPointCountCallback","ShapeGetPointCallback","new_shape","ShapeNewShapeParams","Shape","free","get_fill_color","get_global_bounds","get_inverse_transform","get_local_bounds","get_origin","get_outline_color","get_outline_thickness","get_point","get_point_count","get_position","get_rotation","get_scale","get_texture","get_texture_rect","get_transform","move","rotate","scale","set_fill_color","set_origin","set_outline_color","set_outline_thickness","set_position","set_rotation","set_scale","set_texture","set_texture_rect","update","new_sprite","Sprite","copy","free","get_color","get_global_bounds","get_inverse_transform","get_local_bounds","get_origin","get_position","get_rotation","get_scale","get_texture","get_texture_rect","get_transform","move","rotate","scale","set_color","set_origin","set_position","set_rotation","set_scale","set_texture","set_texture_rect","TextStyle","new_text","Text","copy","find_character_pos","free","get_color","get_fill_color","get_font","get_global_bounds","get_inverse_transform","get_letter_spacing","get_line_spacing","get_local_bounds","get_origin","get_outline_color","get_outline_thickness","get_position","get_rotation","get_scale","get_string","get_style","get_transform","get_unicode_string","move","rotate","scale","set_character_size","set_color","set_fill_color","set_font","set_letter_spacing","set_line_spacing","set_origin","set_outline_color","set_outline_thickness","set_position","set_rotation","set_scale","set_string","set_style","set_unicode_string","new_texture","TextureNewTextureParams","new_texture_from_file","TextureNewTextureFromFileParams","new_texture_from_memory","TextureNewTextureFromMemoryParams","new_texture_from_stream","TextureNewTextureFromStreamParams","new_texture_from_image","TextureNewTextureFromImageParams","Texture","bind","copy","copy_to_image","free","generate_mipmap","get_size","is_repeated","is_smooth","is_srgb","set_repeated","set_smooth","set_srgb","swap","update_from_image","update_from_pixels","update_from_render_window","update_from_texture","update_from_window","TextureUpdateFromPixelsParams","TextureUpdateFromTextureParams","TextureUpdateFromImageParams","TextureUpdateFromWindowParams","TextureUpdateFromRenderWindowParams","Transform","get_matrix","get_inverse","transform_point","transform_rect","combine","translate","rotate","rotate_with_center","scale","scale_with_center","equal","transform_from_matrix","TransformRotateWithCenterParams","TransformScaleWithCenterParams","new_transformable","Transformable","copy","free","get_inverse_transform","get_origin","get_position","get_rotation","get_scale","get_transform","move","rotate","scale","set_origin","set_position","set_rotation","set_scale","VertexArray","append","clear","copy","free","get_bounds","get_primitive_type","get_vertex","get_vertex_count","resize","set_primitive_type","VertexBuffer","bind","copy","free","get_primitive_type","get_usage","set_primitive_type","set_usage","swap","update","update_from_vertex_buffer","View","copy","free","get_center","get_rotation","get_size","get_viewport","move","reset","rotate","set_center","set_rotation","set_size","set_viewport","zoom","Vertex","new_vertex_array","VertexBufferUsage","new_vertex_buffer","VertexBufferNewVertexBufferParams","VertexBufferUpdateParams","vertexbuffer_is_available","new_view","new_view_from_rect","ViewNewViewFromRectParams","FtpTransferMode","FtpStatus","FtpListingResponse","free","get_count","get_message","get_name","get_status","is_ok","FtpDirectoryResponse","free","get_directory","get_message","get_status","is_ok","FtpResponse","free","get_message","get_status","is_ok","new_ftp","Ftp","change_directory","connect","delete_directory","delete_file","disconnect","download","free","get_directory_listing","get_working_directory","keep_alive","login","login_anonymous","parent_directory","rename_file","send_command","upload","FtpConnectParams","new_ftp_response_directory","FtpNewFtpResponseDirectoryParams","FtpDownloadParams","FtpUploadParams","HttpMethod","HttpStatus","new_http_request","HttpRequest","free","set_body","set_field","set_http_version","set_method","set_uri","HttpResponse","free","get_body","get_field","get_status","new_http","Http","free","send_request","set_host","IpAddress","to_string","to_integer","ipaddress_from_string","ipaddress_from_bytes","ipaddress_from_integer","ipaddress_get_local_address","ipaddress_get_public_address","new_packet","Packet","append","can_read","clear","copy","end_of_packet","free","get_data","get_data_size","readuint16","readuint32","write_bool","write_double","write_float","write_string","write_wide_string","writeint16","writeint32","writeint8","writeuint16","writeuint32","writeuint8","new_socket_selector","SocketSelector","add_tcp_listener","add_tcp_socket","add_udp_socket","clear","copy","free","is_tcp_listener_ready","is_tcp_socket_ready","is_udp_socket_ready","remove_tcp_listener","remove_tcp_socket","remove_udp_socket","wait","SocketStatus","new_tcp_listener","TcpListener","accept","free","is_blocking","listen","set_blocking","new_tcp_socket","TcpSocket","connect","disconnect","free","get_remote_address","is_blocking","receive","receive_packet","send","send_packet","send_partial","set_blocking","TcpSocketConnectParams","TcpSocketSendPartialParams","TcpSocketReceiveParams","UdpSocket","bind","free","is_blocking","receive","receive_packet","send","send_packet","set_blocking","unbind","new_udp_socket","UdpSocketSendParams","UdpSocketReceiveParams","UdpSocketSendPacketParams","UdpSocketReceivePacketParams","new_clock","Clock","copy","free","get_elapsed_time","restart","InputStream","InputStreamReadFunc","InputStreamSeekFunc","InputStreamTellFunc","InputStreamGetSizeFunc","sleep","Time","as_seconds","as_milliseconds","as_microseconds","seconds","milliseconds","microseconds","Mutex","Thread","Vector2i","Vector2u","Vector2f","Vector3f","clipboard_get_string","clipboard_get_unicode_string","clipboard_set_string","clipboard_set_unicode_string","new_context","Context","free","get_settings","set_active","context_get_active_context_id","CursorType","new_cursor_from_pixels","CursorNewCursorFromPixelsParams","new_cursor_from_system","CursorNewCursorFromSystemParams","Cursor","free","process_event","Window","close","display","free","get_position","get_settings","get_size","get_system_handle","has_focus","is_open","poll_event","request_focus","set_active","set_framerate_limit","set_icon","set_joystick_threshold","set_key_repeat_enabled","set_mouse_cursor","set_mouse_cursor_grabbed","set_mouse_cursor_visible","set_position","set_size","set_title","set_unicode_title","set_vertical_sync_enabled","set_visible","wait_event","CloseEvent","SizeEvent","LostFocusEvent","GainedFocusEvent","TextEnteredEvent","KeyPressedEvent","KeyReleasedEvent","MouseWheelScrollEvent","MouseButtonPressedEvent","MouseButtonReleasedEvent","MouseMovedEvent","MouseEnteredEvent","MouseLeftEvent","JoystickButtonPressedEvent","JoystickButtonReleasedEvent","JoystickMovedEvent","JoystickConnectedEvent","JoystickDisconnectedEvent","TouchBeganEvent","TouchMovedEvent","TouchEndedEvent","SensorChangedEvent","Event","JoystickAxis","joystick_is_connected","joystick_has_axis","joystick_is_button_pressed","joystick_get_axis_position","joystick_get_identification","joystick_update","JoystickIdentification","KeyCode","keyboard_is_key_pressed","keyboard_set_virtual_keyboard_visible","MouseButton","MouseWheel","mouse_is_button_pressed","mouse_get_position","mouse_set_position","SensorType","sensor_is_available","sensor_set_enabled","sensor_get_value","touch_is_down","touch_get_position","VideoMode","is_valid","videomode_get_desktop_mode","videomode_get_fullscreen_modes","ContextSettings","ContextAttribute","new_window","WindowNewWindowParams","new_window_unicode","WindowNewWindowUnicodeParams","new_window_from_handle","WindowNewWindowFromHandleParams","WindowSetIconParams","WindowStyle","WindowHandle",];
var searchModuleData = [[" ","audio.html"],[" ","graphics.html"],[" ","network.html"],[" ","system.html"],[" ","window.html"],];
var searchData = [["audio","","audio.html#listener_set_global_volume","fn "],["audio"," listener_get_global_volume: get the current value of the global volume ","audio.html#listener_get_global_volume","fn "],["audio"," listener_set_position: set the position of the listener in the scene  The defau","audio.html#listener_set_position","fn "],["audio"," listener_get_position: get the current position of the listener in the scene ","audio.html#listener_get_position","fn "],["audio"," listener_set_direction: set the orientation of the forward vector in the scene ","audio.html#listener_set_direction","fn "],["audio"," listener_get_direction: get the current forward vector of the listener in the s","audio.html#listener_get_direction","fn "],["audio"," listener_set_up_vector: set the upward vector of the listener in the scene  The","audio.html#listener_set_up_vector","fn "],["audio"," listener_get_up_vector: get the current upward vector of the listener in the sc","audio.html#listener_get_up_vector","fn "],["audio"," TimeSpan: structure defining a time range ","audio.html#TimeSpan","type "],["audio","","audio.html#new_music_from_file","fn "],["audio"," MusicNewMusicFromFileParams: parameters for new_music_from_file ","audio.html#MusicNewMusicFromFileParams","struct "],["audio"," new_music_from_memory: create a new music and load it from a file in memory  Th","audio.html#new_music_from_memory","fn "],["audio"," MusicNewMusicFromMemoryParams: parameters for new_music_from_memory ","audio.html#MusicNewMusicFromMemoryParams","struct "],["audio"," new_music_from_stream: create a new music and load it from a custom stream  Thi","audio.html#new_music_from_stream","fn "],["audio"," MusicNewMusicFromStreamParams: parameters for new_music_from_stream ","audio.html#MusicNewMusicFromStreamParams","struct "],["audio","","audio.html#Music","type "],["audio"," free: destroy a music ","audio.html#Music.free","fn (Music)"],["audio"," get_attenuation: get the attenuation factor of a music ","audio.html#Music.get_attenuation","fn (Music)"],["audio"," get_duration: get the total duration of a music ","audio.html#Music.get_duration","fn (Music)"],["audio"," get_loop: tell whether or not a music is in loop mode ","audio.html#Music.get_loop","fn (Music)"],["audio"," get_loop_points: get the positions of the of the sound's looping sequence ","audio.html#Music.get_loop_points","fn (Music)"],["audio"," get_min_distance: get the minimum distance of a music ","audio.html#Music.get_min_distance","fn (Music)"],["audio"," get_pitch: get the pitch of a music ","audio.html#Music.get_pitch","fn (Music)"],["audio"," get_playing_offset: get the current playing position of a music ","audio.html#Music.get_playing_offset","fn (Music)"],["audio"," get_position: get the 3D position of a music in the audio scene ","audio.html#Music.get_position","fn (Music)"],["audio"," get_status: get the current status of a music (stopped, paused, playing) ","audio.html#Music.get_status","fn (Music)"],["audio"," get_volume: get the volume of a music ","audio.html#Music.get_volume","fn (Music)"],["audio"," is_relative_to_listener: tell whether a music's position is relative to the  li","audio.html#Music.is_relative_to_listener","fn (Music)"],["audio"," pause: pause a music  This function pauses the music if it was playing,  otherw","audio.html#Music.pause","fn (Music)"],["audio"," play: start or resume playing a music  This function starts the music if it was","audio.html#Music.play","fn (Music)"],["audio"," set_attenuation: set the attenuation factor of a music  The attenuation is a mu","audio.html#Music.set_attenuation","fn (Music)"],["audio"," set_loop: set whether or not a music should loop after reaching the end  If set","audio.html#Music.set_loop","fn (Music)"],["audio"," set_loop_points: sets the beginning and end of the sound's looping sequence usi","audio.html#Music.set_loop_points","fn (Music)"],["audio"," set_min_distance: set the minimum distance of a music  The \"minimum distance\"","audio.html#Music.set_min_distance","fn (Music)"],["audio"," set_pitch: set the pitch of a music  The pitch represents the perceived fundame","audio.html#Music.set_pitch","fn (Music)"],["audio"," set_playing_offset: change the current playing position of a music  The playing","audio.html#Music.set_playing_offset","fn (Music)"],["audio"," set_position: set the 3D position of a music in the audio scene  Only musics wi","audio.html#Music.set_position","fn (Music)"],["audio"," set_relative_to_listener: make a musics's position relative to the listener or ","audio.html#Music.set_relative_to_listener","fn (Music)"],["audio"," set_volume: set the volume of a music  The volume is a value between 0 (mute) a","audio.html#Music.set_volume","fn (Music)"],["audio"," stop: stop playing a music  This function stops the music if it was playing or ","audio.html#Music.stop","fn (Music)"],["audio","","audio.html#new_sound","fn "],["audio","","audio.html#Sound","type "],["audio"," copy: create a new sound by copying an existing one ","audio.html#Sound.copy","fn (Sound)"],["audio"," free: destroy a sound ","audio.html#Sound.free","fn (Sound)"],["audio"," get_attenuation: get the attenuation factor of a sound ","audio.html#Sound.get_attenuation","fn (Sound)"],["audio"," get_buffer: get the audio buffer attached to a sound ","audio.html#Sound.get_buffer","fn (Sound)"],["audio"," get_loop: tell whether or not a sound is in loop mode ","audio.html#Sound.get_loop","fn (Sound)"],["audio"," get_min_distance: get the minimum distance of a sound ","audio.html#Sound.get_min_distance","fn (Sound)"],["audio"," get_pitch: get the pitch of a sound ","audio.html#Sound.get_pitch","fn (Sound)"],["audio"," get_playing_offset: get the current playing position of a sound ","audio.html#Sound.get_playing_offset","fn (Sound)"],["audio"," get_position: get the 3D position of a sound in the audio scene ","audio.html#Sound.get_position","fn (Sound)"],["audio"," get_status: get the current status of a sound (stopped, paused, playing) ","audio.html#Sound.get_status","fn (Sound)"],["audio"," get_volume: get the volume of a sound ","audio.html#Sound.get_volume","fn (Sound)"],["audio"," is_relative_to_listener: tell whether a sound's position is relative to the  li","audio.html#Sound.is_relative_to_listener","fn (Sound)"],["audio"," pause: pause a sound  This function pauses the sound if it was playing,  otherw","audio.html#Sound.pause","fn (Sound)"],["audio"," play: start or resume playing a sound  This function starts the sound if it was","audio.html#Sound.play","fn (Sound)"],["audio"," set_attenuation: set the attenuation factor of a sound  The attenuation is a mu","audio.html#Sound.set_attenuation","fn (Sound)"],["audio"," set_buffer: set the source buffer containing the audio data to play  It is impo","audio.html#Sound.set_buffer","fn (Sound)"],["audio"," set_loop: set whether or not a sound should loop after reaching the end  If set","audio.html#Sound.set_loop","fn (Sound)"],["audio"," set_min_distance: set the minimum distance of a sound  The \"minimum distance\"","audio.html#Sound.set_min_distance","fn (Sound)"],["audio"," set_pitch: set the pitch of a sound  The pitch represents the perceived fundame","audio.html#Sound.set_pitch","fn (Sound)"],["audio"," set_playing_offset: change the current playing position of a sound  The playing","audio.html#Sound.set_playing_offset","fn (Sound)"],["audio"," set_position: set the 3D position of a sound in the audio scene  Only sounds wi","audio.html#Sound.set_position","fn (Sound)"],["audio"," set_relative_to_listener: make the sound's position relative to the listener or","audio.html#Sound.set_relative_to_listener","fn (Sound)"],["audio"," set_volume: set the volume of a sound  The volume is a value between 0 (mute) a","audio.html#Sound.set_volume","fn (Sound)"],["audio"," stop: stop playing a sound  This function stops the sound if it was playing or ","audio.html#Sound.stop","fn (Sound)"],["audio","","audio.html#new_sound_buffer_from_file","fn "],["audio"," SoundBufferNewSoundBufferFromFileParams: parameters for new_sound_buffer_from_f","audio.html#SoundBufferNewSoundBufferFromFileParams","struct "],["audio"," new_sound_buffer_from_memory: create a new sound buffer and load it from a file","audio.html#new_sound_buffer_from_memory","fn "],["audio"," SoundBufferNewSoundBufferFromMemoryParams: parameters for new_sound_buffer_from","audio.html#SoundBufferNewSoundBufferFromMemoryParams","struct "],["audio"," new_sound_buffer_from_stream: create a new sound buffer and load it from a cust","audio.html#new_sound_buffer_from_stream","fn "],["audio"," SoundBufferNewSoundBufferFromStreamParams: parameters for new_sound_buffer_from","audio.html#SoundBufferNewSoundBufferFromStreamParams","struct "],["audio"," new_sound_buffer_from_samples: create a new sound buffer and load it from an ar","audio.html#new_sound_buffer_from_samples","fn "],["audio"," SoundBufferNewSoundBufferFromSamplesParams: parameters for new_sound_buffer_fro","audio.html#SoundBufferNewSoundBufferFromSamplesParams","struct "],["audio","","audio.html#SoundBuffer","type "],["audio"," copy: create a new sound buffer by copying an existing one ","audio.html#SoundBuffer.copy","fn (SoundBuffer)"],["audio"," free: destroy a sound buffer ","audio.html#SoundBuffer.free","fn (SoundBuffer)"],["audio"," get_duration: get the total duration of a sound buffer ","audio.html#SoundBuffer.get_duration","fn (SoundBuffer)"],["audio"," get_sample_count: get the number of samples stored in a sound buffer  The array","audio.html#SoundBuffer.get_sample_count","fn (SoundBuffer)"],["audio"," get_samples: get the array of audio samples stored in a sound buffer  The forma","audio.html#SoundBuffer.get_samples","fn (SoundBuffer)"],["audio"," save_to_file: save a sound buffer to an audio file  Here is a complete list of ","audio.html#SoundBuffer.save_to_file","fn (SoundBuffer)"],["audio","","audio.html#new_sound_buffer_recorder","fn "],["audio","","audio.html#SoundBufferRecorder","type "],["audio"," free: destroy a sound buffer recorder ","audio.html#SoundBufferRecorder.free","fn (SoundBufferRecorder)"],["audio"," get_buffer: get the sound buffer containing the captured audio data  The sound ","audio.html#SoundBufferRecorder.get_buffer","fn (SoundBufferRecorder)"],["audio"," get_device: get the name of the current audio capture device ","audio.html#SoundBufferRecorder.get_device","fn (SoundBufferRecorder)"],["audio"," set_device: set the audio capture device  This function sets the audio capture ","audio.html#SoundBufferRecorder.set_device","fn (SoundBufferRecorder)"],["audio"," start: start the capture of a sound recorder recorder  The sampleRate parameter","audio.html#SoundBufferRecorder.start","fn (SoundBufferRecorder)"],["audio"," stop: stop the capture of a sound recorder ","audio.html#SoundBufferRecorder.stop","fn (SoundBufferRecorder)"],["audio","","audio.html#SoundRecorderStartCallback","type "],["audio","","audio.html#SoundRecorderProcessCallback","type "],["audio","","audio.html#SoundRecorderStopCallback","type "],["audio","","audio.html#new_sound_recorder","fn "],["audio"," SoundRecorderNewSoundRecorderParams: parameters for new_sound_recorder ","audio.html#SoundRecorderNewSoundRecorderParams","struct "],["audio","","audio.html#SoundRecorder","type "],["audio"," free: destroy a sound recorder ","audio.html#SoundRecorder.free","fn (SoundRecorder)"],["audio"," get_device: get the name of the current audio capture device ","audio.html#SoundRecorder.get_device","fn (SoundRecorder)"],["audio"," set_channel_count: set the channel count of the audio capture device  This meth","audio.html#SoundRecorder.set_channel_count","fn (SoundRecorder)"],["audio"," set_device: set the audio capture device  This function sets the audio capture ","audio.html#SoundRecorder.set_device","fn (SoundRecorder)"],["audio"," set_processing_interval: set the processing interval  The processing interval c","audio.html#SoundRecorder.set_processing_interval","fn (SoundRecorder)"],["audio"," start: start the capture of a sound recorder  The sampleRate parameter defines ","audio.html#SoundRecorder.start","fn (SoundRecorder)"],["audio"," stop: stop the capture of a sound recorder ","audio.html#SoundRecorder.stop","fn (SoundRecorder)"],["audio"," soundrecorder_is_available: check if the system supports audio capture  This fu","audio.html#soundrecorder_is_available","fn "],["audio"," soundrecorder_get_default_device: get the name of the default audio capture dev","audio.html#soundrecorder_get_default_device","fn "],["audio"," SoundStatus: enumeration of statuses for sounds and musics ","audio.html#SoundStatus","enum "],["audio"," SoundStreamChunk: defines the data to fill by the OnGetData callback ","audio.html#SoundStreamChunk","type "],["audio","","audio.html#SoundStreamGetDataCallback","type "],["audio","","audio.html#SoundStreamSeekCallback","type "],["audio","","audio.html#new_sound_stream","fn "],["audio"," SoundStreamNewSoundStreamParams: parameters for new_sound_stream ","audio.html#SoundStreamNewSoundStreamParams","struct "],["audio","","audio.html#SoundStream","type "],["audio"," free: destroy a sound stream ","audio.html#SoundStream.free","fn (SoundStream)"],["audio"," get_attenuation: get the attenuation factor of a sound stream ","audio.html#SoundStream.get_attenuation","fn (SoundStream)"],["audio"," get_loop: tell whether or not a sound stream is in loop mode ","audio.html#SoundStream.get_loop","fn (SoundStream)"],["audio"," get_min_distance: get the minimum distance of a sound stream ","audio.html#SoundStream.get_min_distance","fn (SoundStream)"],["audio"," get_pitch: get the pitch of a sound stream ","audio.html#SoundStream.get_pitch","fn (SoundStream)"],["audio"," get_playing_offset: get the current playing position of a sound stream ","audio.html#SoundStream.get_playing_offset","fn (SoundStream)"],["audio"," get_position: get the 3D position of a sound stream in the audio scene ","audio.html#SoundStream.get_position","fn (SoundStream)"],["audio"," get_status: get the current status of a sound stream (stopped, paused, playing)","audio.html#SoundStream.get_status","fn (SoundStream)"],["audio"," get_volume: get the volume of a sound stream ","audio.html#SoundStream.get_volume","fn (SoundStream)"],["audio"," is_relative_to_listener: tell whether a sound stream's position is relative to ","audio.html#SoundStream.is_relative_to_listener","fn (SoundStream)"],["audio"," pause: pause a sound stream  This function pauses the stream if it was playing,","audio.html#SoundStream.pause","fn (SoundStream)"],["audio"," play: start or resume playing a sound stream  This function starts the stream i","audio.html#SoundStream.play","fn (SoundStream)"],["audio"," set_attenuation: set the attenuation factor of a sound stream  The attenuation ","audio.html#SoundStream.set_attenuation","fn (SoundStream)"],["audio"," set_loop: set whether or not a sound stream should loop after reaching the end ","audio.html#SoundStream.set_loop","fn (SoundStream)"],["audio"," set_min_distance: set the minimum distance of a sound stream  The \"minimum dis","audio.html#SoundStream.set_min_distance","fn (SoundStream)"],["audio"," set_pitch: set the pitch of a sound stream  The pitch represents the perceived ","audio.html#SoundStream.set_pitch","fn (SoundStream)"],["audio"," set_playing_offset: change the current playing position of a sound stream  The ","audio.html#SoundStream.set_playing_offset","fn (SoundStream)"],["audio"," set_position: set the 3D position of a sound stream in the audio scene  Only st","audio.html#SoundStream.set_position","fn (SoundStream)"],["audio"," set_relative_to_listener: make a sound stream's position relative to the listen","audio.html#SoundStream.set_relative_to_listener","fn (SoundStream)"],["audio"," set_volume: set the volume of a sound stream  The volume is a value between 0 (","audio.html#SoundStream.set_volume","fn (SoundStream)"],["audio"," stop: stop playing a sound stream  This function stops the stream if it was pla","audio.html#SoundStream.stop","fn (SoundStream)"],["graphics"," BlendMode: blending mode for drawing ","graphics.html#BlendMode","type "],["graphics"," BlendFactor: enumeration of the blending factors ","graphics.html#BlendFactor","enum "],["graphics"," BlendEquation: enumeration of the blending equations ","graphics.html#BlendEquation","enum "],["graphics","","graphics.html#new_circle_shape","fn "],["graphics","","graphics.html#CircleShape","type "],["graphics"," copy: copy an existing circle shape ","graphics.html#CircleShape.copy","fn (CircleShape)"],["graphics"," free: destroy an existing circle Shape ","graphics.html#CircleShape.free","fn (CircleShape)"],["graphics"," get_fill_color: get the fill color of a circle shape ","graphics.html#CircleShape.get_fill_color","fn (CircleShape)"],["graphics"," get_global_bounds: get the global bounding rectangle of a circle shape  The ret","graphics.html#CircleShape.get_global_bounds","fn (CircleShape)"],["graphics"," get_inverse_transform: get the inverse of the combined transform of a circle sh","graphics.html#CircleShape.get_inverse_transform","fn (CircleShape)"],["graphics"," get_local_bounds: get the local bounding rectangle of a circle shape  The retur","graphics.html#CircleShape.get_local_bounds","fn (CircleShape)"],["graphics"," get_origin: get the local origin of a circle shape ","graphics.html#CircleShape.get_origin","fn (CircleShape)"],["graphics"," get_outline_color: get the outline color of a circle shape ","graphics.html#CircleShape.get_outline_color","fn (CircleShape)"],["graphics"," get_outline_thickness: get the outline thickness of a circle shape ","graphics.html#CircleShape.get_outline_thickness","fn (CircleShape)"],["graphics"," get_point: get a point of a circle shape  The result is undefined if index is o","graphics.html#CircleShape.get_point","fn (CircleShape)"],["graphics"," get_point_count: get the total number of points of a circle shape ","graphics.html#CircleShape.get_point_count","fn (CircleShape)"],["graphics"," get_position: get the position of a circle shape ","graphics.html#CircleShape.get_position","fn (CircleShape)"],["graphics"," get_radius: get the radius of a circle ","graphics.html#CircleShape.get_radius","fn (CircleShape)"],["graphics"," get_rotation: get the orientation of a circle shape  The rotation is always in ","graphics.html#CircleShape.get_rotation","fn (CircleShape)"],["graphics"," get_scale: get the current scale of a circle shape ","graphics.html#CircleShape.get_scale","fn (CircleShape)"],["graphics"," get_texture: get the source texture of a circle shape  If the shape has no sour","graphics.html#CircleShape.get_texture","fn (CircleShape)"],["graphics"," get_texture_rect: get the sub-rectangle of the texture displayed by a circle sh","graphics.html#CircleShape.get_texture_rect","fn (CircleShape)"],["graphics"," get_transform: get the combined transform of a circle shape ","graphics.html#CircleShape.get_transform","fn (CircleShape)"],["graphics"," move: move a circle shape by a given offset  This function adds to the current ","graphics.html#CircleShape.move","fn (CircleShape)"],["graphics"," rotate: rotate a circle shape  This function adds to the current rotation of th","graphics.html#CircleShape.rotate","fn (CircleShape)"],["graphics"," scale: scale a circle shape  This function multiplies the current scale of the ","graphics.html#CircleShape.scale","fn (CircleShape)"],["graphics"," set_fill_color: set the fill color of a circle shape  This color is modulated (","graphics.html#CircleShape.set_fill_color","fn (CircleShape)"],["graphics"," set_origin: set the local origin of a circle shape  The origin of an object def","graphics.html#CircleShape.set_origin","fn (CircleShape)"],["graphics"," set_outline_color: set the outline color of a circle shape  You can use Transpa","graphics.html#CircleShape.set_outline_color","fn (CircleShape)"],["graphics"," set_outline_thickness: set the thickness of a circle shape's outline  This numb","graphics.html#CircleShape.set_outline_thickness","fn (CircleShape)"],["graphics"," set_point_count: set the number of points of a circle ","graphics.html#CircleShape.set_point_count","fn (CircleShape)"],["graphics"," set_position: set the position of a circle shape  This function completely over","graphics.html#CircleShape.set_position","fn (CircleShape)"],["graphics"," set_radius: set the radius of a circle ","graphics.html#CircleShape.set_radius","fn (CircleShape)"],["graphics"," set_rotation: set the orientation of a circle shape  This function completely o","graphics.html#CircleShape.set_rotation","fn (CircleShape)"],["graphics"," set_scale: set the scale factors of a circle shape  This function completely ov","graphics.html#CircleShape.set_scale","fn (CircleShape)"],["graphics"," set_texture: change the source texture of a circle shape  The texture argument ","graphics.html#CircleShape.set_texture","fn (CircleShape)"],["graphics"," set_texture_rect: set the sub-rectangle of the texture that a circle shape will","graphics.html#CircleShape.set_texture_rect","fn (CircleShape)"],["graphics"," Color: utility class for manpulating RGBA colors ","graphics.html#Color","type "],["graphics"," to_integer: convert a color to a 32-bit unsigned integer ","graphics.html#Color.to_integer","fn (Color)"],["graphics"," add: add two colors ","graphics.html#Color.add","fn (Color)"],["graphics"," subtract: subtract two colors ","graphics.html#Color.subtract","fn (Color)"],["graphics"," modulate: modulate two colors ","graphics.html#Color.modulate","fn (Color)"],["graphics","","graphics.html#color_from_rgb","fn "],["graphics"," color_from_rgba: construct a color from its 4 RGBA components ","graphics.html#color_from_rgba","fn "],["graphics"," color_from_integer: construct the color from 32-bit unsigned integer ","graphics.html#color_from_integer","fn "],["graphics","","graphics.html#new_convex_shape","fn "],["graphics","","graphics.html#ConvexShape","type "],["graphics"," copy: copy an existing convex shape ","graphics.html#ConvexShape.copy","fn (ConvexShape)"],["graphics"," free: destroy an existing convex Shape ","graphics.html#ConvexShape.free","fn (ConvexShape)"],["graphics"," get_fill_color: get the fill color of a convex shape ","graphics.html#ConvexShape.get_fill_color","fn (ConvexShape)"],["graphics"," get_global_bounds: get the global bounding rectangle of a convex shape  The ret","graphics.html#ConvexShape.get_global_bounds","fn (ConvexShape)"],["graphics"," get_inverse_transform: get the inverse of the combined transform of a convex sh","graphics.html#ConvexShape.get_inverse_transform","fn (ConvexShape)"],["graphics"," get_local_bounds: get the local bounding rectangle of a convex shape  The retur","graphics.html#ConvexShape.get_local_bounds","fn (ConvexShape)"],["graphics"," get_origin: get the local origin of a convex shape ","graphics.html#ConvexShape.get_origin","fn (ConvexShape)"],["graphics"," get_outline_color: get the outline color of a convex shape ","graphics.html#ConvexShape.get_outline_color","fn (ConvexShape)"],["graphics"," get_outline_thickness: get the outline thickness of a convex shape ","graphics.html#ConvexShape.get_outline_thickness","fn (ConvexShape)"],["graphics"," get_point: get a point of a convex shape  The result is undefined if index is o","graphics.html#ConvexShape.get_point","fn (ConvexShape)"],["graphics"," get_point_count: get the total number of points of a convex shape ","graphics.html#ConvexShape.get_point_count","fn (ConvexShape)"],["graphics"," get_position: get the position of a convex shape ","graphics.html#ConvexShape.get_position","fn (ConvexShape)"],["graphics"," get_rotation: get the orientation of a convex shape  The rotation is always in ","graphics.html#ConvexShape.get_rotation","fn (ConvexShape)"],["graphics"," get_scale: get the current scale of a convex shape ","graphics.html#ConvexShape.get_scale","fn (ConvexShape)"],["graphics"," get_texture: get the source texture of a convex shape  If the shape has no sour","graphics.html#ConvexShape.get_texture","fn (ConvexShape)"],["graphics"," get_texture_rect: get the sub-rectangle of the texture displayed by a convex sh","graphics.html#ConvexShape.get_texture_rect","fn (ConvexShape)"],["graphics"," get_transform: get the combined transform of a convex shape ","graphics.html#ConvexShape.get_transform","fn (ConvexShape)"],["graphics"," move: move a convex shape by a given offset  This function adds to the current ","graphics.html#ConvexShape.move","fn (ConvexShape)"],["graphics"," rotate: rotate a convex shape  This function adds to the current rotation of th","graphics.html#ConvexShape.rotate","fn (ConvexShape)"],["graphics"," scale: scale a convex shape  This function multiplies the current scale of the ","graphics.html#ConvexShape.scale","fn (ConvexShape)"],["graphics"," set_fill_color: set the fill color of a convex shape  This color is modulated (","graphics.html#ConvexShape.set_fill_color","fn (ConvexShape)"],["graphics"," set_origin: set the local origin of a convex shape  The origin of an object def","graphics.html#ConvexShape.set_origin","fn (ConvexShape)"],["graphics"," set_outline_color: set the outline color of a convex shape  You can use Transpa","graphics.html#ConvexShape.set_outline_color","fn (ConvexShape)"],["graphics"," set_outline_thickness: set the thickness of a convex shape's outline  This numb","graphics.html#ConvexShape.set_outline_thickness","fn (ConvexShape)"],["graphics"," set_point: set the position of a point in a convex shape  Don't forget that the","graphics.html#ConvexShape.set_point","fn (ConvexShape)"],["graphics"," set_point_count: set the number of points of a convex shap ","graphics.html#ConvexShape.set_point_count","fn (ConvexShape)"],["graphics"," set_position: set the position of a convex shape  This function completely over","graphics.html#ConvexShape.set_position","fn (ConvexShape)"],["graphics"," set_rotation: set the orientation of a convex shape  This function completely o","graphics.html#ConvexShape.set_rotation","fn (ConvexShape)"],["graphics"," set_scale: set the scale factors of a convex shape  This function completely ov","graphics.html#ConvexShape.set_scale","fn (ConvexShape)"],["graphics"," set_texture: change the source texture of a convex shape  The texture argument ","graphics.html#ConvexShape.set_texture","fn (ConvexShape)"],["graphics"," set_texture_rect: set the sub-rectangle of the texture that a convex shape will","graphics.html#ConvexShape.set_texture_rect","fn (ConvexShape)"],["graphics","","graphics.html#new_font_from_file","fn "],["graphics"," FontNewFontFromFileParams: parameters for new_font_from_file ","graphics.html#FontNewFontFromFileParams","struct "],["graphics"," new_font_from_memory: create a new image font a file in memory ","graphics.html#new_font_from_memory","fn "],["graphics"," FontNewFontFromMemoryParams: parameters for new_font_from_memory ","graphics.html#FontNewFontFromMemoryParams","struct "],["graphics"," new_font_from_stream: create a new image font a custom stream ","graphics.html#new_font_from_stream","fn "],["graphics"," FontNewFontFromStreamParams: parameters for new_font_from_stream ","graphics.html#FontNewFontFromStreamParams","struct "],["graphics","","graphics.html#Font","type "],["graphics"," copy: copy an existing font ","graphics.html#Font.copy","fn (Font)"],["graphics"," free: destroy an existing font ","graphics.html#Font.free","fn (Font)"],["graphics"," get_glyph: get a glyph in a font ","graphics.html#Font.get_glyph","fn (Font)"],["graphics"," get_info: get the font information  The returned structure will remain valid on","graphics.html#Font.get_info","fn (Font)"],["graphics"," get_kerning: get the kerning value corresponding to a given pair of characters ","graphics.html#Font.get_kerning","fn (Font)"],["graphics"," get_line_spacing: get the line spacing value ","graphics.html#Font.get_line_spacing","fn (Font)"],["graphics"," get_texture: get the texture containing the glyphs of a given size in a font ","graphics.html#Font.get_texture","fn (Font)"],["graphics"," get_underline_position: get the position of the underline  Underline position i","graphics.html#Font.get_underline_position","fn (Font)"],["graphics"," get_underline_thickness: get the thickness of the underline  Underline thicknes","graphics.html#Font.get_underline_thickness","fn (Font)"],["graphics"," FontGetGlyphParams: parameters for get_glyph ","graphics.html#FontGetGlyphParams","struct "],["graphics"," FontGetKerningParams: parameters for get_kerning ","graphics.html#FontGetKerningParams","struct "],["graphics"," FontInfo: holds various information about a font ","graphics.html#FontInfo","type "],["graphics","","graphics.html#GlslVec2","type "],["graphics","","graphics.html#GlslIvec2","type "],["graphics","","graphics.html#GlslVec3","type "],["graphics"," GlslBvec2 ","graphics.html#GlslBvec2","type "],["graphics"," GlslIvec3 ","graphics.html#GlslIvec3","type "],["graphics"," GlslBvec3 ","graphics.html#GlslBvec3","type "],["graphics"," GlslVec4 ","graphics.html#GlslVec4","type "],["graphics"," GlslIvec4 ","graphics.html#GlslIvec4","type "],["graphics"," GlslBvec4 ","graphics.html#GlslBvec4","type "],["graphics"," GlslMat3 ","graphics.html#GlslMat3","type "],["graphics"," GlslMat4 ","graphics.html#GlslMat4","type "],["graphics"," Glyph: describes a glyph (a visual character) ","graphics.html#Glyph","type "],["graphics","","graphics.html#new_image","fn "],["graphics"," ImageNewImageParams: parameters for new_image ","graphics.html#ImageNewImageParams","struct "],["graphics"," new_image_from_color: create an image and fill it with a unique color ","graphics.html#new_image_from_color","fn "],["graphics"," ImageNewImageFromColorParams: parameters for new_image_from_color ","graphics.html#ImageNewImageFromColorParams","struct "],["graphics"," new_image_from_pixels: create an image from an array of pixels  The pixel array","graphics.html#new_image_from_pixels","fn "],["graphics"," ImageNewImageFromPixelsParams: parameters for new_image_from_pixels ","graphics.html#ImageNewImageFromPixelsParams","struct "],["graphics"," new_image_from_file: create an image from a file on disk  The supported image f","graphics.html#new_image_from_file","fn "],["graphics"," ImageNewImageFromFileParams: parameters for new_image_from_file ","graphics.html#ImageNewImageFromFileParams","struct "],["graphics"," new_image_from_memory: create an image from a file in memory  The supported ima","graphics.html#new_image_from_memory","fn "],["graphics"," ImageNewImageFromMemoryParams: parameters for new_image_from_memory ","graphics.html#ImageNewImageFromMemoryParams","struct "],["graphics"," new_image_from_stream: create an image from a custom stream  The supported imag","graphics.html#new_image_from_stream","fn "],["graphics"," ImageNewImageFromStreamParams: parameters for new_image_from_stream ","graphics.html#ImageNewImageFromStreamParams","struct "],["graphics","","graphics.html#Image","type "],["graphics"," copy: copy an existing image ","graphics.html#Image.copy","fn (Image)"],["graphics"," copy_image: copy pixels from an image onto another  This function does a slow p","graphics.html#Image.copy_image","fn (Image)"],["graphics"," flip_horizontally: flip an image horizontally (left <-> right) ","graphics.html#Image.flip_horizontally","fn (Image)"],["graphics"," flip_vertically: flip an image vertically (top <-> bottom) ","graphics.html#Image.flip_vertically","fn (Image)"],["graphics"," free: destroy an existing image ","graphics.html#Image.free","fn (Image)"],["graphics"," get_pixel: get the color of a pixel in an image  This function doesn't check th","graphics.html#Image.get_pixel","fn (Image)"],["graphics"," get_pixels_ptr: get a read-only pointer to the array of pixels of an image  The","graphics.html#Image.get_pixels_ptr","fn (Image)"],["graphics"," get_size: return the size of an image ","graphics.html#Image.get_size","fn (Image)"],["graphics"," save_to_file: save an image to a file on disk  The format of the image is autom","graphics.html#Image.save_to_file","fn (Image)"],["graphics"," set_pixel: change the color of a pixel in an image  This function doesn't check","graphics.html#Image.set_pixel","fn (Image)"],["graphics"," new_void_mask_from_color: create a transparency mask from a specified color-key","graphics.html#new_void_mask_from_color","fn "],["graphics"," ImageNewVoidMaskFromColorParams: parameters for new_void_mask_from_color ","graphics.html#ImageNewVoidMaskFromColorParams","struct "],["graphics"," ImageCopyImageParams: parameters for copy_image ","graphics.html#ImageCopyImageParams","struct "],["graphics"," ImageSetPixelParams: parameters for set_pixel ","graphics.html#ImageSetPixelParams","struct "],["graphics"," PrimitiveType: types of primitives that a sf::VertexArray can render  Points an","graphics.html#PrimitiveType","enum "],["graphics"," FloatRect: and IntRect are utility classes for manipulating rectangles. ","graphics.html#FloatRect","type "],["graphics","","graphics.html#FloatRect.contains","fn (FloatRect)"],["graphics"," intersects: check intersection between two rectangles ","graphics.html#FloatRect.intersects","fn (FloatRect)"],["graphics"," IntRect ","graphics.html#IntRect","type "],["graphics"," contains ","graphics.html#IntRect.contains","fn (IntRect)"],["graphics"," intersects ","graphics.html#IntRect.intersects","fn (IntRect)"],["graphics","","graphics.html#new_rectangle_shape","fn "],["graphics","","graphics.html#RectangleShape","type "],["graphics"," copy: copy an existing rectangle shape ","graphics.html#RectangleShape.copy","fn (RectangleShape)"],["graphics"," free: destroy an existing rectangle shape ","graphics.html#RectangleShape.free","fn (RectangleShape)"],["graphics"," get_fill_color: get the fill color of a rectangle shape ","graphics.html#RectangleShape.get_fill_color","fn (RectangleShape)"],["graphics"," get_global_bounds: get the global bounding rectangle of a rectangle shape  The ","graphics.html#RectangleShape.get_global_bounds","fn (RectangleShape)"],["graphics"," get_inverse_transform: get the inverse of the combined transform of a rectangle","graphics.html#RectangleShape.get_inverse_transform","fn (RectangleShape)"],["graphics"," get_local_bounds: get the local bounding rectangle of a rectangle shape  The re","graphics.html#RectangleShape.get_local_bounds","fn (RectangleShape)"],["graphics"," get_origin: get the local origin of a rectangle shape ","graphics.html#RectangleShape.get_origin","fn (RectangleShape)"],["graphics"," get_outline_color: get the outline color of a rectangle shape ","graphics.html#RectangleShape.get_outline_color","fn (RectangleShape)"],["graphics"," get_outline_thickness: get the outline thickness of a rectangle shape ","graphics.html#RectangleShape.get_outline_thickness","fn (RectangleShape)"],["graphics"," get_point: get a point of a rectangle shape  The result is undefined if index i","graphics.html#RectangleShape.get_point","fn (RectangleShape)"],["graphics"," get_point_count: get the total number of points of a rectangle shape ","graphics.html#RectangleShape.get_point_count","fn (RectangleShape)"],["graphics"," get_position: get the position of a rectangle shape ","graphics.html#RectangleShape.get_position","fn (RectangleShape)"],["graphics"," get_rotation: get the orientation of a rectangle shape  The rotation is always ","graphics.html#RectangleShape.get_rotation","fn (RectangleShape)"],["graphics"," get_scale: get the current scale of a rectangle shape ","graphics.html#RectangleShape.get_scale","fn (RectangleShape)"],["graphics"," get_size: get the size of a rectangle shape ","graphics.html#RectangleShape.get_size","fn (RectangleShape)"],["graphics"," get_texture: get the source texture of a rectangle shape  If the shape has no s","graphics.html#RectangleShape.get_texture","fn (RectangleShape)"],["graphics"," get_texture_rect: get the sub-rectangle of the texture displayed by a rectangle","graphics.html#RectangleShape.get_texture_rect","fn (RectangleShape)"],["graphics"," get_transform: get the combined transform of a rectangle shape ","graphics.html#RectangleShape.get_transform","fn (RectangleShape)"],["graphics"," move: move a rectangle shape by a given offset  This function adds to the curre","graphics.html#RectangleShape.move","fn (RectangleShape)"],["graphics"," rotate: rotate a rectangle shape  This function adds to the current rotation of","graphics.html#RectangleShape.rotate","fn (RectangleShape)"],["graphics"," scale: scale a rectangle shape  This function multiplies the current scale of t","graphics.html#RectangleShape.scale","fn (RectangleShape)"],["graphics"," set_fill_color: set the fill color of a rectangle shape  This color is modulate","graphics.html#RectangleShape.set_fill_color","fn (RectangleShape)"],["graphics"," set_origin: set the local origin of a rectangle shape  The origin of an object ","graphics.html#RectangleShape.set_origin","fn (RectangleShape)"],["graphics"," set_outline_color: set the outline color of a rectangle shape  You can use Tran","graphics.html#RectangleShape.set_outline_color","fn (RectangleShape)"],["graphics"," set_outline_thickness: set the thickness of a rectangle shape's outline  This n","graphics.html#RectangleShape.set_outline_thickness","fn (RectangleShape)"],["graphics"," set_position: set the position of a rectangle shape  This function completely o","graphics.html#RectangleShape.set_position","fn (RectangleShape)"],["graphics"," set_rotation: set the orientation of a rectangle shape  This function completel","graphics.html#RectangleShape.set_rotation","fn (RectangleShape)"],["graphics"," set_scale: set the scale factors of a rectangle shape  This function completely","graphics.html#RectangleShape.set_scale","fn (RectangleShape)"],["graphics"," set_size: set the size of a rectangle shape ","graphics.html#RectangleShape.set_size","fn (RectangleShape)"],["graphics"," set_texture: change the source texture of a rectangle shape  The texture argume","graphics.html#RectangleShape.set_texture","fn (RectangleShape)"],["graphics"," set_texture_rect: set the sub-rectangle of the texture that a rectangle shape w","graphics.html#RectangleShape.set_texture_rect","fn (RectangleShape)"],["graphics"," RenderStates: define the states used for drawing to a RenderTarget ","graphics.html#RenderStates","type "],["graphics","","graphics.html#new_render_texture","fn "],["graphics"," RenderTextureNewRenderTextureParams: parameters for new_render_texture ","graphics.html#RenderTextureNewRenderTextureParams","struct "],["graphics"," new_render_texture_with_settings: construct a new render texture ","graphics.html#new_render_texture_with_settings","fn "],["graphics"," RenderTextureNewRenderTextureWithSettingsParams: parameters for new_render_text","graphics.html#RenderTextureNewRenderTextureWithSettingsParams","struct "],["graphics","","graphics.html#RenderTexture","type "],["graphics"," clear: clear the rendertexture with the given color ","graphics.html#RenderTexture.clear","fn (RenderTexture)"],["graphics"," display: update the contents of the target texture ","graphics.html#RenderTexture.display","fn (RenderTexture)"],["graphics"," draw_circle_shape ","graphics.html#RenderTexture.draw_circle_shape","fn (RenderTexture)"],["graphics"," draw_convex_shape ","graphics.html#RenderTexture.draw_convex_shape","fn (RenderTexture)"],["graphics"," draw_primitives: draw primitives defined by an array of vertices to a render te","graphics.html#RenderTexture.draw_primitives","fn (RenderTexture)"],["graphics"," draw_rectangle_shape ","graphics.html#RenderTexture.draw_rectangle_shape","fn (RenderTexture)"],["graphics"," draw_shape ","graphics.html#RenderTexture.draw_shape","fn (RenderTexture)"],["graphics"," draw_sprite: draw a drawable object to the render-target ","graphics.html#RenderTexture.draw_sprite","fn (RenderTexture)"],["graphics"," draw_text ","graphics.html#RenderTexture.draw_text","fn (RenderTexture)"],["graphics"," draw_vertex_array ","graphics.html#RenderTexture.draw_vertex_array","fn (RenderTexture)"],["graphics"," draw_vertex_buffer ","graphics.html#RenderTexture.draw_vertex_buffer","fn (RenderTexture)"],["graphics"," free: destroy an existing render texture ","graphics.html#RenderTexture.free","fn (RenderTexture)"],["graphics"," generate_mipmap: generate a mipmap using the current texture data  This functio","graphics.html#RenderTexture.generate_mipmap","fn (RenderTexture)"],["graphics"," get_default_view: get the default view of a render texture ","graphics.html#RenderTexture.get_default_view","fn (RenderTexture)"],["graphics"," get_size: get the size of the rendering region of a render texture ","graphics.html#RenderTexture.get_size","fn (RenderTexture)"],["graphics"," get_texture: get the target texture of a render texture ","graphics.html#RenderTexture.get_texture","fn (RenderTexture)"],["graphics"," get_view: get the current active view of a render texture ","graphics.html#RenderTexture.get_view","fn (RenderTexture)"],["graphics"," get_viewport: get the viewport of a view applied to this target ","graphics.html#RenderTexture.get_viewport","fn (RenderTexture)"],["graphics"," is_repeated: tell whether the texture is repeated or not ","graphics.html#RenderTexture.is_repeated","fn (RenderTexture)"],["graphics"," is_smooth: tell whether the smooth filter is enabled or not for a render textur","graphics.html#RenderTexture.is_smooth","fn (RenderTexture)"],["graphics"," map_coords_to_pixel: convert a point from world coordinates to texture coordina","graphics.html#RenderTexture.map_coords_to_pixel","fn (RenderTexture)"],["graphics"," map_pixel_to_coords: convert a point from texture coordinates to world coordina","graphics.html#RenderTexture.map_pixel_to_coords","fn (RenderTexture)"],["graphics"," pop_gl_states: restore the previously saved OpenGL render states and matrices  ","graphics.html#RenderTexture.pop_gl_states","fn (RenderTexture)"],["graphics"," push_gl_states: save the current OpenGL render states and matrices  This functi","graphics.html#RenderTexture.push_gl_states","fn (RenderTexture)"],["graphics"," reset_gl_states: reset the internal OpenGL states so that the target is ready f","graphics.html#RenderTexture.reset_gl_states","fn (RenderTexture)"],["graphics"," set_active: activate or deactivate a render texture as the current target for r","graphics.html#RenderTexture.set_active","fn (RenderTexture)"],["graphics"," set_repeated: enable or disable texture repeating ","graphics.html#RenderTexture.set_repeated","fn (RenderTexture)"],["graphics"," set_smooth: enable or disable the smooth filter on a render texture ","graphics.html#RenderTexture.set_smooth","fn (RenderTexture)"],["graphics"," set_view: change the current active view of a render texture ","graphics.html#RenderTexture.set_view","fn (RenderTexture)"],["graphics"," RenderTextureDrawSpriteParams: parameters for draw_sprite ","graphics.html#RenderTextureDrawSpriteParams","struct "],["graphics"," RenderTextureDrawTextParams: parameters for draw_text ","graphics.html#RenderTextureDrawTextParams","struct "],["graphics"," RenderTextureDrawShapeParams: parameters for draw_shape ","graphics.html#RenderTextureDrawShapeParams","struct "],["graphics"," RenderTextureDrawCircleShapeParams: parameters for draw_circle_shape ","graphics.html#RenderTextureDrawCircleShapeParams","struct "],["graphics"," RenderTextureDrawConvexShapeParams: parameters for draw_convex_shape ","graphics.html#RenderTextureDrawConvexShapeParams","struct "],["graphics"," RenderTextureDrawRectangleShapeParams: parameters for draw_rectangle_shape ","graphics.html#RenderTextureDrawRectangleShapeParams","struct "],["graphics"," RenderTextureDrawVertexArrayParams: parameters for draw_vertex_array ","graphics.html#RenderTextureDrawVertexArrayParams","struct "],["graphics"," RenderTextureDrawVertexBufferParams: parameters for draw_vertex_buffer ","graphics.html#RenderTextureDrawVertexBufferParams","struct "],["graphics"," RenderTextureDrawPrimitivesParams: parameters for draw_primitives ","graphics.html#RenderTextureDrawPrimitivesParams","struct "],["graphics","","graphics.html#new_render_window","fn "],["graphics"," RenderWindowNewRenderWindowParams: parameters for new_render_window ","graphics.html#RenderWindowNewRenderWindowParams","struct "],["graphics"," new_render_window_unicode: construct a new render window (with a UTF-32 title) ","graphics.html#new_render_window_unicode","fn "],["graphics"," RenderWindowNewRenderWindowUnicodeParams: parameters for new_render_window_unic","graphics.html#RenderWindowNewRenderWindowUnicodeParams","struct "],["graphics"," new_render_window_from_handle: construct a render window from an existing contr","graphics.html#new_render_window_from_handle","fn "],["graphics"," RenderWindowNewRenderWindowFromHandleParams: parameters for new_render_window_f","graphics.html#RenderWindowNewRenderWindowFromHandleParams","struct "],["graphics","","graphics.html#RenderWindow","type "],["graphics"," clear: clear a render window with the given color ","graphics.html#RenderWindow.clear","fn (RenderWindow)"],["graphics"," close: close a render window (but doesn't destroy the internal data) ","graphics.html#RenderWindow.close","fn (RenderWindow)"],["graphics"," display: display a render window on screen ","graphics.html#RenderWindow.display","fn (RenderWindow)"],["graphics"," draw_circle_shape ","graphics.html#RenderWindow.draw_circle_shape","fn (RenderWindow)"],["graphics"," draw_convex_shape ","graphics.html#RenderWindow.draw_convex_shape","fn (RenderWindow)"],["graphics"," draw_primitives: draw primitives defined by an array of vertices to a render wi","graphics.html#RenderWindow.draw_primitives","fn (RenderWindow)"],["graphics"," draw_rectangle_shape ","graphics.html#RenderWindow.draw_rectangle_shape","fn (RenderWindow)"],["graphics"," draw_shape ","graphics.html#RenderWindow.draw_shape","fn (RenderWindow)"],["graphics"," draw_sprite: draw a drawable object to the render-target ","graphics.html#RenderWindow.draw_sprite","fn (RenderWindow)"],["graphics"," draw_text ","graphics.html#RenderWindow.draw_text","fn (RenderWindow)"],["graphics"," draw_vertex_array ","graphics.html#RenderWindow.draw_vertex_array","fn (RenderWindow)"],["graphics"," draw_vertex_buffer ","graphics.html#RenderWindow.draw_vertex_buffer","fn (RenderWindow)"],["graphics"," free: destroy an existing render window ","graphics.html#RenderWindow.free","fn (RenderWindow)"],["graphics"," get_default_view: get the default view of a render window ","graphics.html#RenderWindow.get_default_view","fn (RenderWindow)"],["graphics"," get_position: get the position of a render window ","graphics.html#RenderWindow.get_position","fn (RenderWindow)"],["graphics"," get_settings: get the creation settings of a render window ","graphics.html#RenderWindow.get_settings","fn (RenderWindow)"],["graphics"," get_size: get the size of the rendering region of a render window ","graphics.html#RenderWindow.get_size","fn (RenderWindow)"],["graphics"," get_system_handle: retrieve the OS-specific handle of a render window ","graphics.html#RenderWindow.get_system_handle","fn (RenderWindow)"],["graphics"," get_view: get the current active view of a render window ","graphics.html#RenderWindow.get_view","fn (RenderWindow)"],["graphics"," get_viewport: get the viewport of a view applied to this target ","graphics.html#RenderWindow.get_viewport","fn (RenderWindow)"],["graphics"," has_focus: check whether the render window has the input focus  At any given ti","graphics.html#RenderWindow.has_focus","fn (RenderWindow)"],["graphics"," is_open: tell whether or not a render window is opened ","graphics.html#RenderWindow.is_open","fn (RenderWindow)"],["graphics"," map_coords_to_pixel: convert a point from world coordinates to window coordinat","graphics.html#RenderWindow.map_coords_to_pixel","fn (RenderWindow)"],["graphics"," map_pixel_to_coords: convert a point from window coordinates to world coordinat","graphics.html#RenderWindow.map_pixel_to_coords","fn (RenderWindow)"],["graphics","","graphics.html#RenderWindow.poll_event","fn (RenderWindow)"],["graphics"," pop_gl_states: restore the previously saved OpenGL render states and matrices  ","graphics.html#RenderWindow.pop_gl_states","fn (RenderWindow)"],["graphics"," push_gl_states: save the current OpenGL render states and matrices  This functi","graphics.html#RenderWindow.push_gl_states","fn (RenderWindow)"],["graphics"," request_focus ","graphics.html#RenderWindow.request_focus","fn (RenderWindow)"],["graphics"," reset_gl_states: reset the internal OpenGL states so that the target is ready f","graphics.html#RenderWindow.reset_gl_states","fn (RenderWindow)"],["graphics"," set_active: activate or deactivate a render window as the current target for re","graphics.html#RenderWindow.set_active","fn (RenderWindow)"],["graphics"," set_framerate_limit: limit the framerate to a maximum fixed frequency for a ren","graphics.html#RenderWindow.set_framerate_limit","fn (RenderWindow)"],["graphics"," set_icon: change a render window's icon ","graphics.html#RenderWindow.set_icon","fn (RenderWindow)"],["graphics"," set_joystick_threshold: change the joystick threshold, ie. the value below whic","graphics.html#RenderWindow.set_joystick_threshold","fn (RenderWindow)"],["graphics"," set_key_repeat_enabled: enable or disable automatic key-repeat for keydown even","graphics.html#RenderWindow.set_key_repeat_enabled","fn (RenderWindow)"],["graphics"," set_mouse_cursor: set the displayed cursor to a native system cursor  Upon wind","graphics.html#RenderWindow.set_mouse_cursor","fn (RenderWindow)"],["graphics"," set_mouse_cursor_grabbed: grab or release the mouse cursor  If set, grabs the m","graphics.html#RenderWindow.set_mouse_cursor_grabbed","fn (RenderWindow)"],["graphics"," set_mouse_cursor_visible: show or hide the mouse cursor on a render window ","graphics.html#RenderWindow.set_mouse_cursor_visible","fn (RenderWindow)"],["graphics"," set_position: change the position of a render window on screen  Only works for ","graphics.html#RenderWindow.set_position","fn (RenderWindow)"],["graphics"," set_size: change the size of the rendering region of a render window ","graphics.html#RenderWindow.set_size","fn (RenderWindow)"],["graphics"," set_title: change the title of a render window ","graphics.html#RenderWindow.set_title","fn (RenderWindow)"],["graphics"," set_unicode_title: change the title of a render window (with a UTF-32 string) ","graphics.html#RenderWindow.set_unicode_title","fn (RenderWindow)"],["graphics"," set_vertical_sync_enabled: enable / disable vertical synchronization on a rende","graphics.html#RenderWindow.set_vertical_sync_enabled","fn (RenderWindow)"],["graphics"," set_view: change the current active view of a render window ","graphics.html#RenderWindow.set_view","fn (RenderWindow)"],["graphics"," set_visible: show or hide a render window ","graphics.html#RenderWindow.set_visible","fn (RenderWindow)"],["graphics"," wait_event: wait for an event and return it ","graphics.html#RenderWindow.wait_event","fn (RenderWindow)"],["graphics"," RenderWindowSetIconParams: parameters for set_icon ","graphics.html#RenderWindowSetIconParams","struct "],["graphics"," RenderWindowDrawSpriteParams: parameters for draw_sprite ","graphics.html#RenderWindowDrawSpriteParams","struct "],["graphics"," RenderWindowDrawTextParams: parameters for draw_text ","graphics.html#RenderWindowDrawTextParams","struct "],["graphics"," RenderWindowDrawShapeParams: parameters for draw_shape ","graphics.html#RenderWindowDrawShapeParams","struct "],["graphics"," RenderWindowDrawCircleShapeParams: parameters for draw_circle_shape ","graphics.html#RenderWindowDrawCircleShapeParams","struct "],["graphics"," RenderWindowDrawConvexShapeParams: parameters for draw_convex_shape ","graphics.html#RenderWindowDrawConvexShapeParams","struct "],["graphics"," RenderWindowDrawRectangleShapeParams: parameters for draw_rectangle_shape ","graphics.html#RenderWindowDrawRectangleShapeParams","struct "],["graphics"," RenderWindowDrawVertexArrayParams: parameters for draw_vertex_array ","graphics.html#RenderWindowDrawVertexArrayParams","struct "],["graphics"," RenderWindowDrawVertexBufferParams: parameters for draw_vertex_buffer ","graphics.html#RenderWindowDrawVertexBufferParams","struct "],["graphics"," RenderWindowDrawPrimitivesParams: parameters for draw_primitives ","graphics.html#RenderWindowDrawPrimitivesParams","struct "],["graphics"," mouse_get_position_render_window: get the current position of the mouse relativ","graphics.html#mouse_get_position_render_window","fn "],["graphics"," mouse_set_position_render_window: set the current position of the mouse relativ","graphics.html#mouse_set_position_render_window","fn "],["graphics"," touch_get_position_render_window: get the current position of a touch in window","graphics.html#touch_get_position_render_window","fn "],["graphics","","graphics.html#new_shader_from_file","fn "],["graphics"," ShaderNewShaderFromFileParams: parameters for new_shader_from_file ","graphics.html#ShaderNewShaderFromFileParams","struct "],["graphics"," new_shader_from_memory: load the vertex, geometry and fragment shaders from sou","graphics.html#new_shader_from_memory","fn "],["graphics"," ShaderNewShaderFromMemoryParams: parameters for new_shader_from_memory ","graphics.html#ShaderNewShaderFromMemoryParams","struct "],["graphics"," new_shader_from_stream: load the vertex, geometry and fragment shaders from cus","graphics.html#new_shader_from_stream","fn "],["graphics"," ShaderNewShaderFromStreamParams: parameters for new_shader_from_stream ","graphics.html#ShaderNewShaderFromStreamParams","struct "],["graphics","","graphics.html#Shader","type "],["graphics"," bind: bind a shader for rendering (activate it)  This function is not part of t","graphics.html#Shader.bind","fn (Shader)"],["graphics"," free: destroy an existing shader ","graphics.html#Shader.free","fn (Shader)"],["graphics"," set_bool_uniform: specify value for \p bool uniform ","graphics.html#Shader.set_bool_uniform","fn (Shader)"],["graphics"," set_color_uniform: specify value for \p vec4 uniform ","graphics.html#Shader.set_color_uniform","fn (Shader)"],["graphics"," set_current_texture_uniform: specify current texture as \p sampler2D uniform  T","graphics.html#Shader.set_current_texture_uniform","fn (Shader)"],["graphics"," set_float_uniform: specify value for \p float uniform ","graphics.html#Shader.set_float_uniform","fn (Shader)"],["graphics"," set_float_uniform_array: specify values for \p float[] array uniform ","graphics.html#Shader.set_float_uniform_array","fn (Shader)"],["graphics"," set_int_color_uniform: specify value for \p ivec4 uniform ","graphics.html#Shader.set_int_color_uniform","fn (Shader)"],["graphics"," set_int_uniform: specify value for \p int uniform ","graphics.html#Shader.set_int_uniform","fn (Shader)"],["graphics"," set_texture_uniform: specify a texture as \p sampler2D uniform ","graphics.html#Shader.set_texture_uniform","fn (Shader)"],["graphics"," setbvec2uniform: specify value for \p bvec2 uniform ","graphics.html#Shader.setbvec2uniform","fn (Shader)"],["graphics"," setbvec3uniform: specify value for \p Bvec3 uniform ","graphics.html#Shader.setbvec3uniform","fn (Shader)"],["graphics"," setbvec4uniform: specify value for \p bvec4 uniform  Color objects can be passe","graphics.html#Shader.setbvec4uniform","fn (Shader)"],["graphics"," setivec2uniform: specify value for \p ivec2 uniform ","graphics.html#Shader.setivec2uniform","fn (Shader)"],["graphics"," setivec3uniform: specify value for \p ivec3 uniform ","graphics.html#Shader.setivec3uniform","fn (Shader)"],["graphics"," setivec4uniform: specify value for \p ivec4 uniform  Color objects can be passe","graphics.html#Shader.setivec4uniform","fn (Shader)"],["graphics"," setmat3uniform: specify value for \p mat3 matrix ","graphics.html#Shader.setmat3uniform","fn (Shader)"],["graphics"," setmat3uniformarray: specify values for \p mat3[] array uniform ","graphics.html#Shader.setmat3uniformarray","fn (Shader)"],["graphics"," setmat4uniform: specify value for \p mat4 matrix ","graphics.html#Shader.setmat4uniform","fn (Shader)"],["graphics"," setmat4uniformarray: specify values for \p mat4[] array uniform ","graphics.html#Shader.setmat4uniformarray","fn (Shader)"],["graphics"," setvec2uniform: specify value for \p vec2 uniform ","graphics.html#Shader.setvec2uniform","fn (Shader)"],["graphics"," setvec2uniformarray: specify values for \p vec2[] array uniform ","graphics.html#Shader.setvec2uniformarray","fn (Shader)"],["graphics"," setvec3uniform: specify value for \p vec3 uniform ","graphics.html#Shader.setvec3uniform","fn (Shader)"],["graphics"," setvec3uniformarray: specify values for \p vec3[] array uniform ","graphics.html#Shader.setvec3uniformarray","fn (Shader)"],["graphics"," setvec4uniform: specify value for \p vec4 uniform  Color objects can be passed ","graphics.html#Shader.setvec4uniform","fn (Shader)"],["graphics"," setvec4uniformarray: specify values for \p vec4[] array uniform ","graphics.html#Shader.setvec4uniformarray","fn (Shader)"],["graphics"," ShaderSetFloatUniformArrayParams: parameters for set_float_uniform_array ","graphics.html#ShaderSetFloatUniformArrayParams","struct "],["graphics"," ShaderSetvec2uniformarrayParams: parameters for setvec2uniformarray ","graphics.html#ShaderSetvec2uniformarrayParams","struct "],["graphics"," ShaderSetvec3uniformarrayParams: parameters for setvec3uniformarray ","graphics.html#ShaderSetvec3uniformarrayParams","struct "],["graphics"," ShaderSetvec4uniformarrayParams: parameters for setvec4uniformarray ","graphics.html#ShaderSetvec4uniformarrayParams","struct "],["graphics"," ShaderSetmat3uniformarrayParams: parameters for setmat3uniformarray ","graphics.html#ShaderSetmat3uniformarrayParams","struct "],["graphics"," ShaderSetmat4uniformarrayParams: parameters for setmat4uniformarray ","graphics.html#ShaderSetmat4uniformarrayParams","struct "],["graphics"," shader_is_available: tell whether or not the system supports shaders  This func","graphics.html#shader_is_available","fn "],["graphics"," shader_is_geometry_available: tell whether or not the system supports geometry ","graphics.html#shader_is_geometry_available","fn "],["graphics","","graphics.html#ShapeGetPointCountCallback","type "],["graphics","","graphics.html#ShapeGetPointCallback","type "],["graphics","","graphics.html#new_shape","fn "],["graphics"," ShapeNewShapeParams: parameters for new_shape ","graphics.html#ShapeNewShapeParams","struct "],["graphics","","graphics.html#Shape","type "],["graphics"," free: destroy an existing shape ","graphics.html#Shape.free","fn (Shape)"],["graphics"," get_fill_color: get the fill color of a shape ","graphics.html#Shape.get_fill_color","fn (Shape)"],["graphics"," get_global_bounds: get the global bounding rectangle of a shape  The returned r","graphics.html#Shape.get_global_bounds","fn (Shape)"],["graphics"," get_inverse_transform: get the inverse of the combined transform of a shape ","graphics.html#Shape.get_inverse_transform","fn (Shape)"],["graphics"," get_local_bounds: get the local bounding rectangle of a shape  The returned rec","graphics.html#Shape.get_local_bounds","fn (Shape)"],["graphics"," get_origin: get the local origin of a shape ","graphics.html#Shape.get_origin","fn (Shape)"],["graphics"," get_outline_color: get the outline color of a shape ","graphics.html#Shape.get_outline_color","fn (Shape)"],["graphics"," get_outline_thickness: get the outline thickness of a shape ","graphics.html#Shape.get_outline_thickness","fn (Shape)"],["graphics"," get_point: get a point of a shape  The result is undefined if index is out of t","graphics.html#Shape.get_point","fn (Shape)"],["graphics"," get_point_count: get the total number of points of a shape ","graphics.html#Shape.get_point_count","fn (Shape)"],["graphics"," get_position: get the position of a shape ","graphics.html#Shape.get_position","fn (Shape)"],["graphics"," get_rotation: get the orientation of a shape  The rotation is always in the ran","graphics.html#Shape.get_rotation","fn (Shape)"],["graphics"," get_scale: get the current scale of a shape ","graphics.html#Shape.get_scale","fn (Shape)"],["graphics"," get_texture: get the source texture of a shape  If the shape has no source text","graphics.html#Shape.get_texture","fn (Shape)"],["graphics"," get_texture_rect: get the sub-rectangle of the texture displayed by a shape ","graphics.html#Shape.get_texture_rect","fn (Shape)"],["graphics"," get_transform: get the combined transform of a shape ","graphics.html#Shape.get_transform","fn (Shape)"],["graphics"," move: move a shape by a given offset  This function adds to the current positio","graphics.html#Shape.move","fn (Shape)"],["graphics"," rotate: rotate a shape  This function adds to the current rotation of the objec","graphics.html#Shape.rotate","fn (Shape)"],["graphics"," scale: scale a shape  This function multiplies the current scale of the object,","graphics.html#Shape.scale","fn (Shape)"],["graphics"," set_fill_color: set the fill color of a shape  This color is modulated (multipl","graphics.html#Shape.set_fill_color","fn (Shape)"],["graphics"," set_origin: set the local origin of a shape  The origin of an object defines th","graphics.html#Shape.set_origin","fn (Shape)"],["graphics"," set_outline_color: set the outline color of a shape  You can use Transparent to","graphics.html#Shape.set_outline_color","fn (Shape)"],["graphics"," set_outline_thickness: set the thickness of a shape's outline  This number cann","graphics.html#Shape.set_outline_thickness","fn (Shape)"],["graphics"," set_position: set the position of a shape  This function completely overwrites ","graphics.html#Shape.set_position","fn (Shape)"],["graphics"," set_rotation: set the orientation of a shape  This function completely overwrit","graphics.html#Shape.set_rotation","fn (Shape)"],["graphics"," set_scale: set the scale factors of a shape  This function completely overwrite","graphics.html#Shape.set_scale","fn (Shape)"],["graphics"," set_texture: change the source texture of a shape  The texture argument refers ","graphics.html#Shape.set_texture","fn (Shape)"],["graphics"," set_texture_rect: set the sub-rectangle of the texture that a shape will displa","graphics.html#Shape.set_texture_rect","fn (Shape)"],["graphics"," update: recompute the internal geometry of a shape  This function must be calle","graphics.html#Shape.update","fn (Shape)"],["graphics","","graphics.html#new_sprite","fn "],["graphics","","graphics.html#Sprite","type "],["graphics"," copy: copy an existing sprite ","graphics.html#Sprite.copy","fn (Sprite)"],["graphics"," free: destroy an existing sprite ","graphics.html#Sprite.free","fn (Sprite)"],["graphics"," get_color: get the global color of a sprite ","graphics.html#Sprite.get_color","fn (Sprite)"],["graphics"," get_global_bounds: get the global bounding rectangle of a sprite  The returned ","graphics.html#Sprite.get_global_bounds","fn (Sprite)"],["graphics"," get_inverse_transform: get the inverse of the combined transform of a sprite ","graphics.html#Sprite.get_inverse_transform","fn (Sprite)"],["graphics"," get_local_bounds: get the local bounding rectangle of a sprite  The returned re","graphics.html#Sprite.get_local_bounds","fn (Sprite)"],["graphics"," get_origin: get the local origin of a sprite ","graphics.html#Sprite.get_origin","fn (Sprite)"],["graphics"," get_position: get the position of a sprite ","graphics.html#Sprite.get_position","fn (Sprite)"],["graphics"," get_rotation: get the orientation of a sprite  The rotation is always in the ra","graphics.html#Sprite.get_rotation","fn (Sprite)"],["graphics"," get_scale: get the current scale of a sprite ","graphics.html#Sprite.get_scale","fn (Sprite)"],["graphics"," get_texture: get the source texture of a sprite  If the sprite has no source te","graphics.html#Sprite.get_texture","fn (Sprite)"],["graphics"," get_texture_rect: get the sub-rectangle of the texture displayed by a sprite ","graphics.html#Sprite.get_texture_rect","fn (Sprite)"],["graphics"," get_transform: get the combined transform of a sprite ","graphics.html#Sprite.get_transform","fn (Sprite)"],["graphics"," move: move a sprite by a given offset  This function adds to the current positi","graphics.html#Sprite.move","fn (Sprite)"],["graphics"," rotate: rotate a sprite  This function adds to the current rotation of the obje","graphics.html#Sprite.rotate","fn (Sprite)"],["graphics"," scale: scale a sprite  This function multiplies the current scale of the object","graphics.html#Sprite.scale","fn (Sprite)"],["graphics"," set_color: set the global color of a sprite  This color is modulated (multiplie","graphics.html#Sprite.set_color","fn (Sprite)"],["graphics"," set_origin: set the local origin of a sprite  The origin of an object defines t","graphics.html#Sprite.set_origin","fn (Sprite)"],["graphics"," set_position: set the position of a sprite  This function completely overwrites","graphics.html#Sprite.set_position","fn (Sprite)"],["graphics"," set_rotation: set the orientation of a sprite  This function completely overwri","graphics.html#Sprite.set_rotation","fn (Sprite)"],["graphics"," set_scale: set the scale factors of a sprite  This function completely overwrit","graphics.html#Sprite.set_scale","fn (Sprite)"],["graphics"," set_texture: change the source texture of a sprite  The texture argument refers","graphics.html#Sprite.set_texture","fn (Sprite)"],["graphics"," set_texture_rect: set the sub-rectangle of the texture that a sprite will displ","graphics.html#Sprite.set_texture_rect","fn (Sprite)"],["graphics"," TextStyle: text styles ","graphics.html#TextStyle","enum "],["graphics","","graphics.html#new_text","fn "],["graphics","","graphics.html#Text","type "],["graphics"," copy: copy an existing text ","graphics.html#Text.copy","fn (Text)"],["graphics"," find_character_pos: return the position of the index-th character in a text  Th","graphics.html#Text.find_character_pos","fn (Text)"],["graphics"," free: destroy an existing text ","graphics.html#Text.free","fn (Text)"],["graphics"," get_color: get the fill color of a text ","graphics.html#Text.get_color","fn (Text)"],["graphics"," get_fill_color: get the fill color of a text ","graphics.html#Text.get_fill_color","fn (Text)"],["graphics"," get_font: get the font used by a text  If the text has no font attached, a NULL","graphics.html#Text.get_font","fn (Text)"],["graphics"," get_global_bounds: get the global bounding rectangle of a text  The returned re","graphics.html#Text.get_global_bounds","fn (Text)"],["graphics"," get_inverse_transform: get the inverse of the combined transform of a text ","graphics.html#Text.get_inverse_transform","fn (Text)"],["graphics"," get_letter_spacing: get the size of the letter spacing factor ","graphics.html#Text.get_letter_spacing","fn (Text)"],["graphics"," get_line_spacing: get the size of the line spacing factor ","graphics.html#Text.get_line_spacing","fn (Text)"],["graphics"," get_local_bounds: get the local bounding rectangle of a text  The returned rect","graphics.html#Text.get_local_bounds","fn (Text)"],["graphics"," get_origin: get the local origin of a text ","graphics.html#Text.get_origin","fn (Text)"],["graphics"," get_outline_color: get the outline color of a text ","graphics.html#Text.get_outline_color","fn (Text)"],["graphics"," get_outline_thickness: get the outline thickness of a text ","graphics.html#Text.get_outline_thickness","fn (Text)"],["graphics"," get_position: get the position of a text ","graphics.html#Text.get_position","fn (Text)"],["graphics"," get_rotation: get the orientation of a text  The rotation is always in the rang","graphics.html#Text.get_rotation","fn (Text)"],["graphics"," get_scale: get the current scale of a text ","graphics.html#Text.get_scale","fn (Text)"],["graphics"," get_string: get the string of a text (returns an ANSI string) ","graphics.html#Text.get_string","fn (Text)"],["graphics"," get_style: get the style of a text ","graphics.html#Text.get_style","fn (Text)"],["graphics"," get_transform: get the combined transform of a text ","graphics.html#Text.get_transform","fn (Text)"],["graphics"," get_unicode_string: get the string of a text (returns a unicode string) ","graphics.html#Text.get_unicode_string","fn (Text)"],["graphics"," move: move a text by a given offset  This function adds to the current position","graphics.html#Text.move","fn (Text)"],["graphics"," rotate: rotate a text  This function adds to the current rotation of the object","graphics.html#Text.rotate","fn (Text)"],["graphics"," scale: scale a text  This function multiplies the current scale of the object, ","graphics.html#Text.scale","fn (Text)"],["graphics"," set_character_size: set the character size of a text  The default size is 30. ","graphics.html#Text.set_character_size","fn (Text)"],["graphics"," set_color: set the fill color of a text  By default, the text's fill color is o","graphics.html#Text.set_color","fn (Text)"],["graphics"," set_fill_color: set the fill color of a text  By default, the text's fill color","graphics.html#Text.set_fill_color","fn (Text)"],["graphics"," set_font: set the font of a text  The font argument refers to a texture that mu","graphics.html#Text.set_font","fn (Text)"],["graphics"," set_letter_spacing: set the letter spacing factor  The default spacing between ","graphics.html#Text.set_letter_spacing","fn (Text)"],["graphics"," set_line_spacing: set the line spacing factor  The default spacing between line","graphics.html#Text.set_line_spacing","fn (Text)"],["graphics"," set_origin: set the local origin of a text  The origin of an object defines the","graphics.html#Text.set_origin","fn (Text)"],["graphics"," set_outline_color: set the outline color of the text  By default, the text's ou","graphics.html#Text.set_outline_color","fn (Text)"],["graphics"," set_outline_thickness: set the thickness of the text's outline  By default, the","graphics.html#Text.set_outline_thickness","fn (Text)"],["graphics"," set_position: set the position of a text  This function completely overwrites t","graphics.html#Text.set_position","fn (Text)"],["graphics"," set_rotation: set the orientation of a text  This function completely overwrite","graphics.html#Text.set_rotation","fn (Text)"],["graphics"," set_scale: set the scale factors of a text  This function completely overwrites","graphics.html#Text.set_scale","fn (Text)"],["graphics"," set_string: set the string of a text (from an ANSI string)  A text's string is ","graphics.html#Text.set_string","fn (Text)"],["graphics"," set_style: set the style of a text  You can pass a combination of one or more s","graphics.html#Text.set_style","fn (Text)"],["graphics"," set_unicode_string: set the string of a text (from a unicode string) ","graphics.html#Text.set_unicode_string","fn (Text)"],["graphics","","graphics.html#new_texture","fn "],["graphics"," TextureNewTextureParams: parameters for new_texture ","graphics.html#TextureNewTextureParams","struct "],["graphics"," new_texture_from_file: create a new texture from a file ","graphics.html#new_texture_from_file","fn "],["graphics"," TextureNewTextureFromFileParams: parameters for new_texture_from_file ","graphics.html#TextureNewTextureFromFileParams","struct "],["graphics"," new_texture_from_memory: create a new texture from a file in memory ","graphics.html#new_texture_from_memory","fn "],["graphics"," TextureNewTextureFromMemoryParams: parameters for new_texture_from_memory ","graphics.html#TextureNewTextureFromMemoryParams","struct "],["graphics"," new_texture_from_stream: create a new texture from a custom stream ","graphics.html#new_texture_from_stream","fn "],["graphics"," TextureNewTextureFromStreamParams: parameters for new_texture_from_stream ","graphics.html#TextureNewTextureFromStreamParams","struct "],["graphics"," new_texture_from_image: create a new texture from an image ","graphics.html#new_texture_from_image","fn "],["graphics"," TextureNewTextureFromImageParams: parameters for new_texture_from_image ","graphics.html#TextureNewTextureFromImageParams","struct "],["graphics","","graphics.html#Texture","type "],["graphics"," bind: bind a texture for rendering  This function is not part of the graphics A","graphics.html#Texture.bind","fn (Texture)"],["graphics"," copy: copy an existing texture ","graphics.html#Texture.copy","fn (Texture)"],["graphics"," copy_to_image: copy a texture's pixels to an image ","graphics.html#Texture.copy_to_image","fn (Texture)"],["graphics"," free: destroy an existing texture ","graphics.html#Texture.free","fn (Texture)"],["graphics"," generate_mipmap: generate a mipmap using the current texture data  Mipmaps are ","graphics.html#Texture.generate_mipmap","fn (Texture)"],["graphics"," get_size: return the size of the texture ","graphics.html#Texture.get_size","fn (Texture)"],["graphics"," is_repeated: tell whether a texture is repeated or not ","graphics.html#Texture.is_repeated","fn (Texture)"],["graphics"," is_smooth: tell whether the smooth filter is enabled or not for a texture ","graphics.html#Texture.is_smooth","fn (Texture)"],["graphics"," is_srgb: tell whether the texture source is converted from sRGB or not ","graphics.html#Texture.is_srgb","fn (Texture)"],["graphics"," set_repeated: enable or disable repeating for a texture  Repeating is involved ","graphics.html#Texture.set_repeated","fn (Texture)"],["graphics"," set_smooth: enable or disable the smooth filter on a texture ","graphics.html#Texture.set_smooth","fn (Texture)"],["graphics"," set_srgb: enable or disable conversion from sRGB  When providing texture data f","graphics.html#Texture.set_srgb","fn (Texture)"],["graphics"," swap: swap the contents of a texture with those of another ","graphics.html#Texture.swap","fn (Texture)"],["graphics"," update_from_image: update a texture from an image ","graphics.html#Texture.update_from_image","fn (Texture)"],["graphics"," update_from_pixels: update a texture from an array of pixels ","graphics.html#Texture.update_from_pixels","fn (Texture)"],["graphics"," update_from_render_window: update a texture from the contents of a render-windo","graphics.html#Texture.update_from_render_window","fn (Texture)"],["graphics"," update_from_texture: update a part of this texture from another texture  No add","graphics.html#Texture.update_from_texture","fn (Texture)"],["graphics"," update_from_window: update a texture from the contents of a window ","graphics.html#Texture.update_from_window","fn (Texture)"],["graphics"," TextureUpdateFromPixelsParams: parameters for update_from_pixels ","graphics.html#TextureUpdateFromPixelsParams","struct "],["graphics"," TextureUpdateFromTextureParams: parameters for update_from_texture ","graphics.html#TextureUpdateFromTextureParams","struct "],["graphics"," TextureUpdateFromImageParams: parameters for update_from_image ","graphics.html#TextureUpdateFromImageParams","struct "],["graphics"," TextureUpdateFromWindowParams: parameters for update_from_window ","graphics.html#TextureUpdateFromWindowParams","struct "],["graphics"," TextureUpdateFromRenderWindowParams: parameters for update_from_render_window ","graphics.html#TextureUpdateFromRenderWindowParams","struct "],["graphics"," Transform: encapsulate a 3x3 transform matrix ","graphics.html#Transform","type "],["graphics"," get_matrix: return the 4x4 matrix of a transform  This function fills an array ","graphics.html#Transform.get_matrix","fn (Transform)"],["graphics"," get_inverse: return the inverse of a transform  If the inverse cannot be comput","graphics.html#Transform.get_inverse","fn (Transform)"],["graphics"," transform_point: apply a transform to a 2D point ","graphics.html#Transform.transform_point","fn (Transform)"],["graphics"," transform_rect: apply a transform to a rectangle  Since SFML doesn't provide su","graphics.html#Transform.transform_rect","fn (Transform)"],["graphics"," combine: combine two transforms  The result is a transform that is equivalent t","graphics.html#Transform.combine","fn (Transform)"],["graphics"," translate: combine a transform with a translation ","graphics.html#Transform.translate","fn (Transform)"],["graphics"," rotate: combine the current transform with a rotation ","graphics.html#Transform.rotate","fn (Transform)"],["graphics"," rotate_with_center: combine the current transform with a rotation  The center o","graphics.html#Transform.rotate_with_center","fn (Transform)"],["graphics"," scale: combine the current transform with a scaling ","graphics.html#Transform.scale","fn (Transform)"],["graphics"," scale_with_center: combine the current transform with a scaling  The center of ","graphics.html#Transform.scale_with_center","fn (Transform)"],["graphics"," equal: compare two transforms for equality  Performs an element-wise comparison","graphics.html#Transform.equal","fn (Transform)"],["graphics","","graphics.html#transform_from_matrix","fn "],["graphics"," TransformRotateWithCenterParams: parameters for rotate_with_center ","graphics.html#TransformRotateWithCenterParams","struct "],["graphics"," TransformScaleWithCenterParams: parameters for scale_with_center ","graphics.html#TransformScaleWithCenterParams","struct "],["graphics","","graphics.html#new_transformable","fn "],["graphics","","graphics.html#Transformable","type "],["graphics"," copy: copy an existing transformable ","graphics.html#Transformable.copy","fn (Transformable)"],["graphics"," free: destroy an existing transformable ","graphics.html#Transformable.free","fn (Transformable)"],["graphics"," get_inverse_transform: get the inverse of the combined transform of a transform","graphics.html#Transformable.get_inverse_transform","fn (Transformable)"],["graphics"," get_origin: get the local origin of a transformable ","graphics.html#Transformable.get_origin","fn (Transformable)"],["graphics"," get_position: get the position of a transformable ","graphics.html#Transformable.get_position","fn (Transformable)"],["graphics"," get_rotation: get the orientation of a transformable  The rotation is always in","graphics.html#Transformable.get_rotation","fn (Transformable)"],["graphics"," get_scale: get the current scale of a transformable ","graphics.html#Transformable.get_scale","fn (Transformable)"],["graphics"," get_transform: get the combined transform of a transformable ","graphics.html#Transformable.get_transform","fn (Transformable)"],["graphics"," move: move a transformable by a given offset  This function adds to the current","graphics.html#Transformable.move","fn (Transformable)"],["graphics"," rotate: rotate a transformable  This function adds to the current rotation of t","graphics.html#Transformable.rotate","fn (Transformable)"],["graphics"," scale: scale a transformable  This function multiplies the current scale of the","graphics.html#Transformable.scale","fn (Transformable)"],["graphics"," set_origin: set the local origin of a transformable  The origin of an object de","graphics.html#Transformable.set_origin","fn (Transformable)"],["graphics"," set_position: set the position of a transformable  This function completely ove","graphics.html#Transformable.set_position","fn (Transformable)"],["graphics"," set_rotation: set the orientation of a transformable  This function completely ","graphics.html#Transformable.set_rotation","fn (Transformable)"],["graphics"," set_scale: set the scale factors of a transformable  This function completely o","graphics.html#Transformable.set_scale","fn (Transformable)"],["graphics"," VertexArray ","graphics.html#VertexArray","type "],["graphics"," append: add a vertex to a vertex array array ","graphics.html#VertexArray.append","fn (VertexArray)"],["graphics"," clear: clear a vertex array  This function removes all the vertices from the ar","graphics.html#VertexArray.clear","fn (VertexArray)"],["graphics"," copy: copy an existing vertex array ","graphics.html#VertexArray.copy","fn (VertexArray)"],["graphics"," free: destroy an existing vertex array ","graphics.html#VertexArray.free","fn (VertexArray)"],["graphics"," get_bounds: compute the bounding rectangle of a vertex array  This function ret","graphics.html#VertexArray.get_bounds","fn (VertexArray)"],["graphics"," get_primitive_type: get the type of primitives drawn by a vertex array ","graphics.html#VertexArray.get_primitive_type","fn (VertexArray)"],["graphics"," get_vertex: get access to a vertex by its index  This function doesn't check in","graphics.html#VertexArray.get_vertex","fn (VertexArray)"],["graphics"," get_vertex_count: return the vertex count of a vertex array ","graphics.html#VertexArray.get_vertex_count","fn (VertexArray)"],["graphics"," resize: resize the vertex array  If vertexCount is greater than the current siz","graphics.html#VertexArray.resize","fn (VertexArray)"],["graphics"," set_primitive_type: set the type of primitives of a vertex array  This function","graphics.html#VertexArray.set_primitive_type","fn (VertexArray)"],["graphics"," VertexBuffer ","graphics.html#VertexBuffer","type "],["graphics"," bind: bind a vertex buffer for rendering  This function is not part of the grap","graphics.html#VertexBuffer.bind","fn (VertexBuffer)"],["graphics"," copy: copy an existing vertex buffer ","graphics.html#VertexBuffer.copy","fn (VertexBuffer)"],["graphics"," free: destroy an existing vertex buffer ","graphics.html#VertexBuffer.free","fn (VertexBuffer)"],["graphics"," get_primitive_type: get the type of primitives drawn by the vertex buffer ","graphics.html#VertexBuffer.get_primitive_type","fn (VertexBuffer)"],["graphics"," get_usage: get the usage specifier of this vertex buffer ","graphics.html#VertexBuffer.get_usage","fn (VertexBuffer)"],["graphics"," set_primitive_type: set the type of primitives to draw  This function defines h","graphics.html#VertexBuffer.set_primitive_type","fn (VertexBuffer)"],["graphics"," set_usage: set the usage specifier of this vertex buffer  This function provide","graphics.html#VertexBuffer.set_usage","fn (VertexBuffer)"],["graphics"," swap: swap the contents of this vertex buffer with those of another ","graphics.html#VertexBuffer.swap","fn (VertexBuffer)"],["graphics"," update: update a part of the buffer from an array of vertices ","graphics.html#VertexBuffer.update","fn (VertexBuffer)"],["graphics"," update_from_vertex_buffer: copy the contents of another buffer into this buffer","graphics.html#VertexBuffer.update_from_vertex_buffer","fn (VertexBuffer)"],["graphics"," View ","graphics.html#View","type "],["graphics"," copy: copy an existing view ","graphics.html#View.copy","fn (View)"],["graphics"," free: destroy an existing view ","graphics.html#View.free","fn (View)"],["graphics"," get_center: get the center of a view ","graphics.html#View.get_center","fn (View)"],["graphics"," get_rotation: get the current orientation of a view ","graphics.html#View.get_rotation","fn (View)"],["graphics"," get_size: get the size of a view ","graphics.html#View.get_size","fn (View)"],["graphics"," get_viewport: get the target viewport rectangle of a view ","graphics.html#View.get_viewport","fn (View)"],["graphics"," move: move a view relatively to its current position ","graphics.html#View.move","fn (View)"],["graphics"," reset: reset a view to the given rectangle  Note that this function resets the ","graphics.html#View.reset","fn (View)"],["graphics"," rotate: rotate a view relatively to its current orientation ","graphics.html#View.rotate","fn (View)"],["graphics"," set_center: set the center of a view ","graphics.html#View.set_center","fn (View)"],["graphics"," set_rotation: set the orientation of a view  The default rotation of a view is ","graphics.html#View.set_rotation","fn (View)"],["graphics"," set_size: set the size of a view ","graphics.html#View.set_size","fn (View)"],["graphics"," set_viewport: set the target viewport of a view  The viewport is the rectangle ","graphics.html#View.set_viewport","fn (View)"],["graphics"," zoom: resize a view rectangle relatively to its current size  Resizing the view","graphics.html#View.zoom","fn (View)"],["graphics"," Vertex: define a point with color and texture coordinates ","graphics.html#Vertex","type "],["graphics","","graphics.html#new_vertex_array","fn "],["graphics"," VertexBufferUsage: usage specifiers  If data is going to be updated once or mor","graphics.html#VertexBufferUsage","enum "],["graphics","","graphics.html#new_vertex_buffer","fn "],["graphics"," VertexBufferNewVertexBufferParams: parameters for new_vertex_buffer ","graphics.html#VertexBufferNewVertexBufferParams","struct "],["graphics"," VertexBufferUpdateParams: parameters for update ","graphics.html#VertexBufferUpdateParams","struct "],["graphics"," vertexbuffer_is_available: tell whether or not the system supports vertex buffe","graphics.html#vertexbuffer_is_available","fn "],["graphics","","graphics.html#new_view","fn "],["graphics"," new_view_from_rect: construct a view from a rectangle ","graphics.html#new_view_from_rect","fn "],["graphics"," ViewNewViewFromRectParams: parameters for new_view_from_rect ","graphics.html#ViewNewViewFromRectParams","struct "],["network"," FtpTransferMode: enumeration of transfer modes ","network.html#FtpTransferMode","enum "],["network"," FtpStatus: status codes possibly returned by a FTP response ","network.html#FtpStatus","enum "],["network","","network.html#FtpListingResponse","type "],["network","","network.html#FtpListingResponse.free","fn (FtpListingResponse)"],["network"," get_count: return the number of directory/file names contained in a FTP listing","network.html#FtpListingResponse.get_count","fn (FtpListingResponse)"],["network"," get_message: get the full message contained in a FTP listing response ","network.html#FtpListingResponse.get_message","fn (FtpListingResponse)"],["network"," get_name: return a directory/file name contained in a FTP listing response ","network.html#FtpListingResponse.get_name","fn (FtpListingResponse)"],["network"," get_status: get the status code of a FTP listing response ","network.html#FtpListingResponse.get_status","fn (FtpListingResponse)"],["network"," is_ok: check if a FTP listing response status code means a success  This functi","network.html#FtpListingResponse.is_ok","fn (FtpListingResponse)"],["network","","network.html#FtpDirectoryResponse","type "],["network"," free: destroy a FTP directory response ","network.html#FtpDirectoryResponse.free","fn (FtpDirectoryResponse)"],["network"," get_directory: get the directory returned in a FTP directory response ","network.html#FtpDirectoryResponse.get_directory","fn (FtpDirectoryResponse)"],["network"," get_message: get the full message contained in a FTP directory response ","network.html#FtpDirectoryResponse.get_message","fn (FtpDirectoryResponse)"],["network"," get_status: get the status code of a FTP directory response ","network.html#FtpDirectoryResponse.get_status","fn (FtpDirectoryResponse)"],["network"," is_ok: check if a FTP directory response status code means a success  This func","network.html#FtpDirectoryResponse.is_ok","fn (FtpDirectoryResponse)"],["network","","network.html#FtpResponse","type "],["network"," free: destroy a FTP response ","network.html#FtpResponse.free","fn (FtpResponse)"],["network"," get_message: get the full message contained in a FTP response ","network.html#FtpResponse.get_message","fn (FtpResponse)"],["network"," get_status: get the status code of a FTP response ","network.html#FtpResponse.get_status","fn (FtpResponse)"],["network"," is_ok: check if a FTP response status code means a success  This function is de","network.html#FtpResponse.is_ok","fn (FtpResponse)"],["network"," new_ftp: create a new Ftp object ","network.html#new_ftp","fn "],["network","","network.html#Ftp","type "],["network"," change_directory: change the current working directory  The new directory must ","network.html#Ftp.change_directory","fn (Ftp)"],["network"," connect: connect to the specified FTP server  The port should be 21, which is t","network.html#Ftp.connect","fn (Ftp)"],["network"," delete_directory: remove an existing directory  The directory to remove must be","network.html#Ftp.delete_directory","fn (Ftp)"],["network"," delete_file: remove an existing file  The file name must be relative to the cur","network.html#Ftp.delete_file","fn (Ftp)"],["network"," disconnect: close the connection with the server ","network.html#Ftp.disconnect","fn (Ftp)"],["network"," download: download a file from a FTP server  The filename of the distant file i","network.html#Ftp.download","fn (Ftp)"],["network"," free: destroy a Ftp object ","network.html#Ftp.free","fn (Ftp)"],["network"," get_directory_listing: get the contents of the given directory  This function r","network.html#Ftp.get_directory_listing","fn (Ftp)"],["network"," get_working_directory: get the current working directory  The working directory","network.html#Ftp.get_working_directory","fn (Ftp)"],["network"," keep_alive: send a null command to keep the connection alive  This command is u","network.html#Ftp.keep_alive","fn (Ftp)"],["network"," login: log in using a username and a password  Logging in is mandatory after co","network.html#Ftp.login","fn (Ftp)"],["network"," login_anonymous: log in using an anonymous account  Logging in is mandatory aft","network.html#Ftp.login_anonymous","fn (Ftp)"],["network"," parent_directory: go to the parent directory of the current one ","network.html#Ftp.parent_directory","fn (Ftp)"],["network"," rename_file: rename an existing file  The filenames must be relative to the cur","network.html#Ftp.rename_file","fn (Ftp)"],["network"," send_command: send a command to the FTP server  While the most often used comma","network.html#Ftp.send_command","fn (Ftp)"],["network"," upload: upload a file to a FTP server  The name of the local file is relative t","network.html#Ftp.upload","fn (Ftp)"],["network"," FtpConnectParams: parameters for connect ","network.html#FtpConnectParams","struct "],["network"," new_ftp_response_directory: create a new directory  The new directory is create","network.html#new_ftp_response_directory","fn "],["network"," FtpNewFtpResponseDirectoryParams: parameters for new_ftp_response_directory ","network.html#FtpNewFtpResponseDirectoryParams","struct "],["network"," FtpDownloadParams: parameters for download ","network.html#FtpDownloadParams","struct "],["network"," FtpUploadParams: parameters for upload ","network.html#FtpUploadParams","struct "],["network"," HttpMethod: enumerate the available HTTP methods for a request ","network.html#HttpMethod","enum "],["network"," HttpStatus: enumerate all the valid status codes for a response ","network.html#HttpStatus","enum "],["network","","network.html#new_http_request","fn "],["network","","network.html#HttpRequest","type "],["network"," free: destroy a HTTP request ","network.html#HttpRequest.free","fn (HttpRequest)"],["network"," set_body: set the body of a HTTP request  The body of a request is optional and","network.html#HttpRequest.set_body","fn (HttpRequest)"],["network"," set_field: set the value of a header field of a HTTP request  The field is crea","network.html#HttpRequest.set_field","fn (HttpRequest)"],["network"," set_http_version: set the HTTP version of a HTTP request  The HTTP version is 1","network.html#HttpRequest.set_http_version","fn (HttpRequest)"],["network"," set_method: set a HTTP request method  See the HttpMethod enumeration for a com","network.html#HttpRequest.set_method","fn (HttpRequest)"],["network"," set_uri: set a HTTP request URI  The URI is the resource (usually a web page or","network.html#HttpRequest.set_uri","fn (HttpRequest)"],["network","","network.html#HttpResponse","type "],["network"," free: destroy a HTTP response ","network.html#HttpResponse.free","fn (HttpResponse)"],["network"," get_body: get the body of a HTTP response  The body of a response may contain: ","network.html#HttpResponse.get_body","fn (HttpResponse)"],["network"," get_field: get the value of a field of a HTTP response  If the field field is n","network.html#HttpResponse.get_field","fn (HttpResponse)"],["network"," get_status: get the status code of a HTTP reponse  The status code should be th","network.html#HttpResponse.get_status","fn (HttpResponse)"],["network"," new_http: create a new Http object ","network.html#new_http","fn "],["network","","network.html#Http","type "],["network"," free: destroy a Http object ","network.html#Http.free","fn (Http)"],["network"," send_request: send a HTTP request and return the server's response.  You must h","network.html#Http.send_request","fn (Http)"],["network"," set_host: set the target host of a HTTP object  This function just stores the h","network.html#Http.set_host","fn (Http)"],["network"," IpAddress: encapsulate an IPv4 network address ","network.html#IpAddress","type "],["network"," to_string: get a string representation of an address  The returned string is th","network.html#IpAddress.to_string","fn (IpAddress)"],["network"," to_integer: get an integer representation of the address  The returned number i","network.html#IpAddress.to_integer","fn (IpAddress)"],["network","","network.html#ipaddress_from_string","fn "],["network"," ipaddress_from_bytes: create an address from 4 bytes  Calling fromBytes(a, b, c","network.html#ipaddress_from_bytes","fn "],["network"," ipaddress_from_integer: construct an address from a 32-bits integer  This funct","network.html#ipaddress_from_integer","fn "],["network"," ipaddress_get_local_address: get the computer's local address  The local addres","network.html#ipaddress_get_local_address","fn "],["network"," ipaddress_get_public_address: get the computer's public address  The public add","network.html#ipaddress_get_public_address","fn "],["network","","network.html#new_packet","fn "],["network","","network.html#Packet","type "],["network"," append: append data to the end of a packet ","network.html#Packet.append","fn (Packet)"],["network"," can_read: test the validity of a packet, for reading  This function allows to t","network.html#Packet.can_read","fn (Packet)"],["network"," clear ","network.html#Packet.clear","fn (Packet)"],["network"," copy: create a new packet by copying an existing one ","network.html#Packet.copy","fn (Packet)"],["network"," end_of_packet: tell if the reading position has reached the  end of a packet  T","network.html#Packet.end_of_packet","fn (Packet)"],["network"," free: destroy a packet ","network.html#Packet.free","fn (Packet)"],["network"," get_data: get a pointer to the data contained in a packet  Warning: the returne","network.html#Packet.get_data","fn (Packet)"],["network"," get_data_size: get the size of the data contained in a packet  This function re","network.html#Packet.get_data_size","fn (Packet)"],["network"," readuint16 ","network.html#Packet.readuint16","fn (Packet)"],["network"," readuint32 ","network.html#Packet.readuint32","fn (Packet)"],["network"," write_bool: functions to insert data into a packet ","network.html#Packet.write_bool","fn (Packet)"],["network"," write_double ","network.html#Packet.write_double","fn (Packet)"],["network"," write_float ","network.html#Packet.write_float","fn (Packet)"],["network"," write_string ","network.html#Packet.write_string","fn (Packet)"],["network"," write_wide_string ","network.html#Packet.write_wide_string","fn (Packet)"],["network"," writeint16 ","network.html#Packet.writeint16","fn (Packet)"],["network"," writeint32 ","network.html#Packet.writeint32","fn (Packet)"],["network"," writeint8 ","network.html#Packet.writeint8","fn (Packet)"],["network"," writeuint16 ","network.html#Packet.writeuint16","fn (Packet)"],["network"," writeuint32 ","network.html#Packet.writeuint32","fn (Packet)"],["network"," writeuint8 ","network.html#Packet.writeuint8","fn (Packet)"],["network","","network.html#new_socket_selector","fn "],["network","","network.html#SocketSelector","type "],["network"," add_tcp_listener: add a new socket to a socket selector  This function keeps a ","network.html#SocketSelector.add_tcp_listener","fn (SocketSelector)"],["network"," add_tcp_socket ","network.html#SocketSelector.add_tcp_socket","fn (SocketSelector)"],["network"," add_udp_socket ","network.html#SocketSelector.add_udp_socket","fn (SocketSelector)"],["network"," clear: remove all the sockets stored in a selector  This function doesn't destr","network.html#SocketSelector.clear","fn (SocketSelector)"],["network"," copy: create a new socket selector by copying an existing one ","network.html#SocketSelector.copy","fn (SocketSelector)"],["network"," free: destroy a socket selector ","network.html#SocketSelector.free","fn (SocketSelector)"],["network"," is_tcp_listener_ready: test a socket to know if it is ready to receive data  Th","network.html#SocketSelector.is_tcp_listener_ready","fn (SocketSelector)"],["network"," is_tcp_socket_ready ","network.html#SocketSelector.is_tcp_socket_ready","fn (SocketSelector)"],["network"," is_udp_socket_ready ","network.html#SocketSelector.is_udp_socket_ready","fn (SocketSelector)"],["network"," remove_tcp_listener: remove a socket from a socket selector  This function does","network.html#SocketSelector.remove_tcp_listener","fn (SocketSelector)"],["network"," remove_tcp_socket ","network.html#SocketSelector.remove_tcp_socket","fn (SocketSelector)"],["network"," remove_udp_socket ","network.html#SocketSelector.remove_udp_socket","fn (SocketSelector)"],["network"," wait: wait until one or more sockets are ready to receive  This function return","network.html#SocketSelector.wait","fn (SocketSelector)"],["network"," SocketStatus: define the status that can be returned by the socket functions ","network.html#SocketStatus","enum "],["network","","network.html#new_tcp_listener","fn "],["network","","network.html#TcpListener","type "],["network"," accept: accept a new connection  If the socket is in blocking mode, this functi","network.html#TcpListener.accept","fn (TcpListener)"],["network"," free: destroy a TCP listener ","network.html#TcpListener.free","fn (TcpListener)"],["network"," is_blocking: tell whether a TCP listener is in blocking or non-blocking mode ","network.html#TcpListener.is_blocking","fn (TcpListener)"],["network"," listen: start listening for connections  This functions makes the socket listen","network.html#TcpListener.listen","fn (TcpListener)"],["network"," set_blocking: set the blocking state of a TCP listener  In blocking mode, calls","network.html#TcpListener.set_blocking","fn (TcpListener)"],["network","","network.html#new_tcp_socket","fn "],["network","","network.html#TcpSocket","type "],["network"," connect: connect a TCP socket to a remote peer  In blocking mode, this function","network.html#TcpSocket.connect","fn (TcpSocket)"],["network"," disconnect: disconnect a TCP socket from its remote peer  This function gracefu","network.html#TcpSocket.disconnect","fn (TcpSocket)"],["network"," free: destroy a TCP socket ","network.html#TcpSocket.free","fn (TcpSocket)"],["network"," get_remote_address: get the address of the connected peer of a TCP socket  It t","network.html#TcpSocket.get_remote_address","fn (TcpSocket)"],["network"," is_blocking: tell whether a TCP socket is in blocking or non-blocking mode ","network.html#TcpSocket.is_blocking","fn (TcpSocket)"],["network"," receive: receive raw data from the remote peer of a TCP socket  In blocking mod","network.html#TcpSocket.receive","fn (TcpSocket)"],["network"," receive_packet: receive a formatted packet of data from the remote peer  In blo","network.html#TcpSocket.receive_packet","fn (TcpSocket)"],["network"," send: send raw data to the remote peer of a TCP socket  To be able to handle pa","network.html#TcpSocket.send","fn (TcpSocket)"],["network"," send_packet: send a formatted packet of data to the remote peer of a TCP socket","network.html#TcpSocket.send_packet","fn (TcpSocket)"],["network"," send_partial: send raw data to the remote peer  This function will fail if the ","network.html#TcpSocket.send_partial","fn (TcpSocket)"],["network"," set_blocking: set the blocking state of a TCP listener  In blocking mode, calls","network.html#TcpSocket.set_blocking","fn (TcpSocket)"],["network"," TcpSocketConnectParams: parameters for connect ","network.html#TcpSocketConnectParams","struct "],["network"," TcpSocketSendPartialParams: parameters for send_partial ","network.html#TcpSocketSendPartialParams","struct "],["network"," TcpSocketReceiveParams: parameters for receive ","network.html#TcpSocketReceiveParams","struct "],["network"," UdpSocket ","network.html#UdpSocket","type "],["network"," bind: bind a UDP socket to a specific port  Binding the socket to a port is nec","network.html#UdpSocket.bind","fn (UdpSocket)"],["network"," free: destroy a UDP socket ","network.html#UdpSocket.free","fn (UdpSocket)"],["network"," is_blocking: tell whether a UDP socket is in blocking or non-blocking mode ","network.html#UdpSocket.is_blocking","fn (UdpSocket)"],["network"," receive: receive raw data from a remote peer with a UDP socket  In blocking mod","network.html#UdpSocket.receive","fn (UdpSocket)"],["network"," receive_packet: receive a formatted packet of data from a remote peer with a UD","network.html#UdpSocket.receive_packet","fn (UdpSocket)"],["network"," send: send raw data to a remote peer with a UDP socket  Make sure that size is ","network.html#UdpSocket.send","fn (UdpSocket)"],["network"," send_packet: send a formatted packet of data to a remote peer with a UDP socket","network.html#UdpSocket.send_packet","fn (UdpSocket)"],["network"," set_blocking: set the blocking state of a UDP listener  In blocking mode, calls","network.html#UdpSocket.set_blocking","fn (UdpSocket)"],["network"," unbind: unbind a UDP socket from the local port to which it is bound  The port ","network.html#UdpSocket.unbind","fn (UdpSocket)"],["network","","network.html#new_udp_socket","fn "],["network"," UdpSocketSendParams: parameters for send ","network.html#UdpSocketSendParams","struct "],["network"," UdpSocketReceiveParams: parameters for receive ","network.html#UdpSocketReceiveParams","struct "],["network"," UdpSocketSendPacketParams: parameters for send_packet ","network.html#UdpSocketSendPacketParams","struct "],["network"," UdpSocketReceivePacketParams: parameters for receive_packet ","network.html#UdpSocketReceivePacketParams","struct "],["system","","system.html#new_clock","fn "],["system","","system.html#Clock","type "],["system"," copy: create a new clock by copying an existing one ","system.html#Clock.copy","fn (Clock)"],["system"," free: destroy a clock ","system.html#Clock.free","fn (Clock)"],["system"," get_elapsed_time: get the time elapsed in a clock  This function returns the ti","system.html#Clock.get_elapsed_time","fn (Clock)"],["system"," restart: restart a clock  This function puts the time counter back to zero.  It","system.html#Clock.restart","fn (Clock)"],["system"," InputStream: set of callbacks that allow users to define custom file streams ","system.html#InputStream","type "],["system","","system.html#InputStreamReadFunc","type "],["system","","system.html#InputStreamSeekFunc","type "],["system","","system.html#InputStreamTellFunc","type "],["system","","system.html#InputStreamGetSizeFunc","type "],["system","","system.html#sleep","fn "],["system"," Time: represents a time value ","system.html#Time","type "],["system","","system.html#Time.as_seconds","fn (Time)"],["system"," as_milliseconds: return a time value as a number of milliseconds ","system.html#Time.as_milliseconds","fn (Time)"],["system"," as_microseconds: return a time value as a number of microseconds ","system.html#Time.as_microseconds","fn (Time)"],["system"," seconds: construct a time value from a number of seconds ","system.html#seconds","fn "],["system"," milliseconds: construct a time value from a number of milliseconds ","system.html#milliseconds","fn "],["system"," microseconds: construct a time value from a number of microseconds ","system.html#microseconds","fn "],["system"," Mutex ","system.html#Mutex","type "],["system"," Thread ","system.html#Thread","type "],["system"," Vector2i: 2-component vector of integers ","system.html#Vector2i","type "],["system"," Vector2u: 2-component vector of unsigned integers ","system.html#Vector2u","type "],["system"," Vector2f: 2-component vector of floats ","system.html#Vector2f","type "],["system"," Vector3f: 3-component vector of floats ","system.html#Vector3f","type "],["window","","window.html#clipboard_get_string","fn "],["window"," clipboard_get_unicode_string: get the content of the clipboard as string data (","window.html#clipboard_get_unicode_string","fn "],["window"," clipboard_set_string: set the content of the clipboard as ANSI string data  Thi","window.html#clipboard_set_string","fn "],["window"," clipboard_set_unicode_string: set the content of the clipboard as Unicode strin","window.html#clipboard_set_unicode_string","fn "],["window","","window.html#new_context","fn "],["window","","window.html#Context","type "],["window"," free: destroy a context ","window.html#Context.free","fn (Context)"],["window"," get_settings: get the settings of the context.  Note that these settings may be","window.html#Context.get_settings","fn (Context)"],["window"," set_active: activate or deactivate explicitely a context ","window.html#Context.set_active","fn (Context)"],["window"," context_get_active_context_id: get the currently active context's ID  The conte","window.html#context_get_active_context_id","fn "],["window"," CursorType: enumeration of the native system cursor types  Refer to the followi","window.html#CursorType","enum "],["window","","window.html#new_cursor_from_pixels","fn "],["window"," CursorNewCursorFromPixelsParams: parameters for new_cursor_from_pixels ","window.html#CursorNewCursorFromPixelsParams","struct "],["window"," new_cursor_from_system: create a native system cursor  Refer to the list of cur","window.html#new_cursor_from_system","fn "],["window"," CursorNewCursorFromSystemParams: parameters for new_cursor_from_system ","window.html#CursorNewCursorFromSystemParams","struct "],["window","","window.html#Cursor","type "],["window"," free: destroy a cursor ","window.html#Cursor.free","fn (Cursor)"],["window"," process_event: internal event processing function ","window.html#process_event","fn "],["window","","window.html#Window","type "],["window"," close: close a window and destroy all the attached resources  After calling thi","window.html#Window.close","fn (Window)"],["window"," display: display on screen what has been rendered to the  window so far  This f","window.html#Window.display","fn (Window)"],["window"," free: destroy a window ","window.html#Window.free","fn (Window)"],["window"," get_position: get the position of a window ","window.html#Window.get_position","fn (Window)"],["window"," get_settings: get the settings of the OpenGL context of a window  Note that the","window.html#Window.get_settings","fn (Window)"],["window"," get_size: get the size of the rendering region of a window  The size doesn't in","window.html#Window.get_size","fn (Window)"],["window"," get_system_handle: get the OS-specific handle of the window  The type of the re","window.html#Window.get_system_handle","fn (Window)"],["window"," has_focus: check whether the window has the input focus  At any given time, onl","window.html#Window.has_focus","fn (Window)"],["window"," is_open: tell whether or not a window is opened  This function returns whether ","window.html#Window.is_open","fn (Window)"],["window"," poll_event: pop the event on top of event queue, if any, and return it  Note th","window.html#Window.poll_event","fn (Window)"],["window"," request_focus: request the current window to be made the active  foreground win","window.html#Window.request_focus","fn (Window)"],["window"," set_active: activate or deactivate a window as the current target  for OpenGL r","window.html#Window.set_active","fn (Window)"],["window"," set_framerate_limit: limit the framerate to a maximum fixed frequency  If a lim","window.html#Window.set_framerate_limit","fn (Window)"],["window"," set_icon: change a window's icon ","window.html#Window.set_icon","fn (Window)"],["window"," set_joystick_threshold: change the joystick threshold  The joystick threshold i","window.html#Window.set_joystick_threshold","fn (Window)"],["window"," set_key_repeat_enabled: enable or disable automatic key-repeat  If key repeat i","window.html#Window.set_key_repeat_enabled","fn (Window)"],["window"," set_mouse_cursor: set the displayed cursor to a native system cursor  Upon wind","window.html#Window.set_mouse_cursor","fn (Window)"],["window"," set_mouse_cursor_grabbed: grab or release the mouse cursor  If set, grabs the m","window.html#Window.set_mouse_cursor_grabbed","fn (Window)"],["window"," set_mouse_cursor_visible: show or hide the mouse cursor ","window.html#Window.set_mouse_cursor_visible","fn (Window)"],["window"," set_position: change the position of a window on screen  This function only wor","window.html#Window.set_position","fn (Window)"],["window"," set_size: change the size of the rendering region of a window ","window.html#Window.set_size","fn (Window)"],["window"," set_title: change the title of a window ","window.html#Window.set_title","fn (Window)"],["window"," set_unicode_title: change the title of a window (with a UTF-32 string) ","window.html#Window.set_unicode_title","fn (Window)"],["window"," set_vertical_sync_enabled: enable or disable vertical synchronization  Activati","window.html#Window.set_vertical_sync_enabled","fn (Window)"],["window"," set_visible: show or hide a window ","window.html#Window.set_visible","fn (Window)"],["window"," wait_event: wait for an event and return it  This function is blocking: if ther","window.html#Window.wait_event","fn (Window)"],["window"," CloseEvent parameters ","window.html#CloseEvent","struct "],["window"," SizeEvent parameters ","window.html#SizeEvent","struct "],["window"," LostFocusEvent parameters ","window.html#LostFocusEvent","struct "],["window"," GainedFocusEvent parameters ","window.html#GainedFocusEvent","struct "],["window"," TextEnteredEvent parameters ","window.html#TextEnteredEvent","struct "],["window"," KeyPressedEvent parameters ","window.html#KeyPressedEvent","type "],["window"," KeyReleasedEvent parameters ","window.html#KeyReleasedEvent","type "],["window"," MouseWheelScrollEvent parameters ","window.html#MouseWheelScrollEvent","struct "],["window"," MouseButtonPressedEvent parameters ","window.html#MouseButtonPressedEvent","type "],["window"," MouseButtonReleasedEvent parameters ","window.html#MouseButtonReleasedEvent","type "],["window"," MouseMovedEvent parameters ","window.html#MouseMovedEvent","struct "],["window"," MouseEnteredEvent parameters ","window.html#MouseEnteredEvent","struct "],["window"," MouseLeftEvent parameters ","window.html#MouseLeftEvent","struct "],["window"," JoystickButtonPressedEvent parameters ","window.html#JoystickButtonPressedEvent","type "],["window"," JoystickButtonReleasedEvent parameters ","window.html#JoystickButtonReleasedEvent","type "],["window"," JoystickMovedEvent parameters ","window.html#JoystickMovedEvent","struct "],["window"," JoystickConnectedEvent parameters ","window.html#JoystickConnectedEvent","type "],["window"," JoystickDisconnectedEvent parameters ","window.html#JoystickDisconnectedEvent","type "],["window"," TouchBeganEvent parameters ","window.html#TouchBeganEvent","type "],["window"," TouchMovedEvent parameters ","window.html#TouchMovedEvent","type "],["window"," TouchEndedEvent parameters ","window.html#TouchEndedEvent","type "],["window"," SensorChangedEvent parameters ","window.html#SensorChangedEvent","struct "],["window"," Event defines a system event and its parameters ","window.html#Event","type "],["window"," JoystickAxis: axes supported by SFML joysticks ","window.html#JoystickAxis","enum "],["window","","window.html#joystick_is_connected","fn "],["window"," joystick_has_axis: check if a joystick supports a given axis  If the joystick i","window.html#joystick_has_axis","fn "],["window"," joystick_is_button_pressed: check if a joystick button is pressed  If the joyst","window.html#joystick_is_button_pressed","fn "],["window"," joystick_get_axis_position: get the current position of a joystick axis  If the","window.html#joystick_get_axis_position","fn "],["window"," joystick_get_identification: get the joystick information  The result of this f","window.html#joystick_get_identification","fn "],["window"," joystick_update: update the states of all joysticks  This function is used inte","window.html#joystick_update","fn "],["window"," JoystickIdentification: holds a joystick's identification ","window.html#JoystickIdentification","type "],["window"," KeyCode: key codes ","window.html#KeyCode","enum "],["window","","window.html#keyboard_is_key_pressed","fn "],["window"," keyboard_set_virtual_keyboard_visible: show or hide the virtual keyboard.  Warn","window.html#keyboard_set_virtual_keyboard_visible","fn "],["window"," MouseButton: mouse buttons ","window.html#MouseButton","enum "],["window"," MouseWheel: mouse wheels ","window.html#MouseWheel","enum "],["window","","window.html#mouse_is_button_pressed","fn "],["window"," mouse_get_position: get the current position of the mouse  This function return","window.html#mouse_get_position","fn "],["window"," mouse_set_position: set the current position of the mouse  This function sets t","window.html#mouse_set_position","fn "],["window"," SensorType: sensor Types ","window.html#SensorType","enum "],["window","","window.html#sensor_is_available","fn "],["window"," sensor_set_enabled: enable or disable a sensor  All sensors are disabled by def","window.html#sensor_set_enabled","fn "],["window"," sensor_get_value: get the current sensor value ","window.html#sensor_get_value","fn "],["window","","window.html#touch_is_down","fn "],["window"," touch_get_position: get the current position of a touch in window coordinates  ","window.html#touch_get_position","fn "],["window"," VideoMode: defines a video mode (width, height, bpp, frequency)  and provides f","window.html#VideoMode","type "],["window"," is_valid: tell whether or not a video mode is valid  The validity of video mode","window.html#VideoMode.is_valid","fn (VideoMode)"],["window","","window.html#videomode_get_desktop_mode","fn "],["window"," videomode_get_fullscreen_modes: retrieve all the video modes supported in fulls","window.html#videomode_get_fullscreen_modes","fn "],["window"," ContextSettings: structure defining the window's creation settings ","window.html#ContextSettings","type "],["window"," ContextAttribute: enumeration of the context attribute flags ","window.html#ContextAttribute","enum "],["window","","window.html#new_window","fn "],["window"," WindowNewWindowParams: parameters for new_window ","window.html#WindowNewWindowParams","struct "],["window"," new_window_unicode: construct a new window (with a UTF-32 title)  This function","window.html#new_window_unicode","fn "],["window"," WindowNewWindowUnicodeParams: parameters for new_window_unicode ","window.html#WindowNewWindowUnicodeParams","struct "],["window"," new_window_from_handle: construct a window from an existing control  Use this c","window.html#new_window_from_handle","fn "],["window"," WindowNewWindowFromHandleParams: parameters for new_window_from_handle ","window.html#WindowNewWindowFromHandleParams","struct "],["window"," WindowSetIconParams: parameters for set_icon ","window.html#WindowSetIconParams","struct "],["window"," WindowStyle: enumeration of window creation styles ","window.html#WindowStyle","enum "],["window"," WindowHandle: low-level window handle type ","window.html#WindowHandle","type "],];
